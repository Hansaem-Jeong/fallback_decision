//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: BEV_image.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 03-Nov-2021 20:39:09
//

// Include Files

// aes
#include <time.h>
#include <stdio.h>
//#include <omp.h>

#include "BEV_image.h"
#include "BEV_image_data.h"
#include "BEV_image_initialize.h"
#include "CTRV_MODEL.h"
#include "CV_MODEL.h"
#include "HONDA.h"
#include "I_lat.h"
#include "Interacting.h"
#include "Mixing.h"
#include "RSS_model.h"
#include "TLC.h"
#include "find.h"
#include "inpolygon.h"
#include "isequal.h"
#include "linspace.h"
#include "meshgrid.h"
#include "minOrMax.h"
#include "norm.h"
#include "rt_nonfinite.h"
#include <algorithm>
#include <cmath>

//aes
double start_bev;
double start_bev2;
double start_bev3;
double start_bev4;

// Variable Definitions
static double State[80640];

static double out_Prob_ctrv[32];

static bool out_Prob_ctrv_not_empty;

static double out_Prob_cv[32];

static double out_P_ctrv[800];

static double out_P_cv[800];

static double flag[32];

// Function Definitions
//
// Arguments    : const double Chassis[11]
//                const double Traffic[288]
//                const double Lane[10]
//                double AEB_in
//                unsigned char bev_image[275598]
// Return Type  : void
//
void BEV_image(const double Chassis[11], const double Traffic[288],
               const double Lane[10], double AEB_in,
               unsigned char bev_image[275598])
{
  static const double RANGE_I_LAT_RANGE[255]{-0.2,
                                             -0.1952755905511811,
                                             -0.19055118110236222,
                                             -0.18582677165354333,
                                             -0.18110236220472442,
                                             -0.17637795275590551,
                                             -0.17165354330708663,
                                             -0.16692913385826774,
                                             -0.16220472440944883,
                                             -0.15748031496062992,
                                             -0.15275590551181104,
                                             -0.14803149606299215,
                                             -0.14330708661417324,
                                             -0.13858267716535433,
                                             -0.13385826771653545,
                                             -0.12913385826771656,
                                             -0.12440944881889765,
                                             -0.11968503937007875,
                                             -0.11496062992125985,
                                             -0.11023622047244096,
                                             -0.10551181102362206,
                                             -0.10078740157480316,
                                             -0.096062992125984265,
                                             -0.091338582677165367,
                                             -0.086614173228346469,
                                             -0.081889763779527572,
                                             -0.077165354330708674,
                                             -0.072440944881889791,
                                             -0.067716535433070879,
                                             -0.062992125984251968,
                                             -0.058267716535433084,
                                             -0.0535433070866142,
                                             -0.048818897637795289,
                                             -0.044094488188976377,
                                             -0.039370078740157494,
                                             -0.03464566929133861,
                                             -0.0299212598425197,
                                             -0.025196850393700787,
                                             -0.020472440944881903,
                                             -0.01574803149606302,
                                             -0.011023622047244108,
                                             -0.0062992125984251968,
                                             -0.0015748031496063131,
                                             0.0031496062992125706,
                                             0.0078740157480314821,
                                             0.012598425196850394,
                                             0.017322834645669277,
                                             0.022047244094488161,
                                             0.026771653543307072,
                                             0.031496062992125984,
                                             0.036220472440944868,
                                             0.040944881889763751,
                                             0.045669291338582663,
                                             0.050393700787401574,
                                             0.05511811023622043,
                                             0.059842519685039341,
                                             0.064566929133858253,
                                             0.069291338582677164,
                                             0.074015748031496076,
                                             0.078740157480314932,
                                             0.083464566929133843,
                                             0.088188976377952755,
                                             0.092913385826771611,
                                             0.097637795275590522,
                                             0.10236220472440943,
                                             0.10708661417322834,
                                             0.11181102362204726,
                                             0.11653543307086611,
                                             0.12125984251968502,
                                             0.12598425196850394,
                                             0.13070866141732279,
                                             0.1354330708661417,
                                             0.14015748031496061,
                                             0.14488188976377953,
                                             0.14960629921259844,
                                             0.15433070866141729,
                                             0.1590551181102362,
                                             0.16377952755905512,
                                             0.16850393700787397,
                                             0.17322834645669288,
                                             0.17795275590551179,
                                             0.18267716535433071,
                                             0.18740157480314962,
                                             0.19212598425196847,
                                             0.19685039370078738,
                                             0.2015748031496063,
                                             0.20629921259842515,
                                             0.21102362204724406,
                                             0.21574803149606298,
                                             0.22047244094488189,
                                             0.2251968503937008,
                                             0.22992125984251965,
                                             0.23464566929133857,
                                             0.23937007874015748,
                                             0.24409448818897633,
                                             0.24881889763779524,
                                             0.25354330708661416,
                                             0.25826771653543307,
                                             0.262992125984252,
                                             0.26771653543307083,
                                             0.27244094488188975,
                                             0.27716535433070866,
                                             0.28188976377952751,
                                             0.28661417322834642,
                                             0.29133858267716534,
                                             0.29606299212598425,
                                             0.30078740157480316,
                                             0.30551181102362207,
                                             0.31023622047244087,
                                             0.31496062992125978,
                                             0.31968503937007869,
                                             0.32440944881889761,
                                             0.32913385826771652,
                                             0.33385826771653543,
                                             0.33858267716535434,
                                             0.34330708661417325,
                                             0.34803149606299216,
                                             0.35275590551181096,
                                             0.35748031496062987,
                                             0.36220472440944879,
                                             0.3669291338582677,
                                             0.37165354330708661,
                                             0.37637795275590552,
                                             0.38110236220472443,
                                             0.38582677165354323,
                                             0.39055118110236214,
                                             0.39527559055118106,
                                             0.39999999999999997,
                                             0.40472440944881888,
                                             0.40944881889763779,
                                             0.4141732283464567,
                                             0.41889763779527561,
                                             0.42362204724409452,
                                             0.42834645669291332,
                                             0.43307086614173224,
                                             0.43779527559055115,
                                             0.44251968503937006,
                                             0.44724409448818897,
                                             0.45196850393700788,
                                             0.45669291338582679,
                                             0.46141732283464559,
                                             0.4661417322834645,
                                             0.47086614173228342,
                                             0.47559055118110233,
                                             0.48031496062992124,
                                             0.48503937007874015,
                                             0.48976377952755906,
                                             0.494488188976378,
                                             0.49921259842519689,
                                             0.50393700787401574,
                                             0.50866141732283454,
                                             0.51338582677165356,
                                             0.51811023622047236,
                                             0.52283464566929139,
                                             0.52755905511811019,
                                             0.53228346456692921,
                                             0.537007874015748,
                                             0.54173228346456681,
                                             0.54645669291338583,
                                             0.55118110236220463,
                                             0.55590551181102366,
                                             0.56062992125984246,
                                             0.56535433070866148,
                                             0.57007874015748028,
                                             0.5748031496062993,
                                             0.5795275590551181,
                                             0.5842519685039369,
                                             0.58897637795275593,
                                             0.59370078740157473,
                                             0.59842519685039375,
                                             0.60314960629921255,
                                             0.60787401574803157,
                                             0.61259842519685037,
                                             0.61732283464566917,
                                             0.62204724409448819,
                                             0.626771653543307,
                                             0.631496062992126,
                                             0.63622047244094482,
                                             0.64094488188976384,
                                             0.64566929133858264,
                                             0.65039370078740166,
                                             0.65511811023622046,
                                             0.65984251968503926,
                                             0.66456692913385829,
                                             0.66929133858267709,
                                             0.67401574803149611,
                                             0.67874015748031491,
                                             0.68346456692913393,
                                             0.68818897637795273,
                                             0.69291338582677153,
                                             0.69763779527559056,
                                             0.70236220472440936,
                                             0.70708661417322838,
                                             0.71181102362204718,
                                             0.7165354330708662,
                                             0.721259842519685,
                                             0.725984251968504,
                                             0.73070866141732282,
                                             0.73543307086614162,
                                             0.74015748031496065,
                                             0.74488188976377945,
                                             0.74960629921259847,
                                             0.75433070866141727,
                                             0.75905511811023629,
                                             0.76377952755905509,
                                             0.76850393700787389,
                                             0.77322834645669292,
                                             0.77795275590551172,
                                             0.78267716535433074,
                                             0.78740157480314954,
                                             0.79212598425196856,
                                             0.79685039370078736,
                                             0.80157480314960639,
                                             0.80629921259842519,
                                             0.81102362204724421,
                                             0.815748031496063,
                                             0.82047244094488181,
                                             0.82519685039370083,
                                             0.82992125984251963,
                                             0.83464566929133865,
                                             0.83937007874015745,
                                             0.84409448818897648,
                                             0.84881889763779528,
                                             0.8535433070866143,
                                             0.8582677165354331,
                                             0.8629921259842519,
                                             0.86771653543307092,
                                             0.87244094488188972,
                                             0.87716535433070875,
                                             0.88188976377952755,
                                             0.88661417322834657,
                                             0.89133858267716537,
                                             0.89606299212598439,
                                             0.90078740157480319,
                                             0.905511811023622,
                                             0.910236220472441,
                                             0.91496062992125982,
                                             0.91968503937007884,
                                             0.92440944881889764,
                                             0.92913385826771666,
                                             0.93385826771653546,
                                             0.93858267716535426,
                                             0.94330708661417328,
                                             0.94803149606299209,
                                             0.95275590551181111,
                                             0.95748031496062991,
                                             0.96220472440944893,
                                             0.96692913385826773,
                                             0.97165354330708653,
                                             0.97637795275590555,
                                             0.98110236220472435,
                                             0.98582677165354338,
                                             0.99055118110236218,
                                             0.9952755905511812,
                                             1.0};
  static const double b[251]{15625.0,
                             15252.992000000002,
                             14886.936000000003,
                             14526.784000000003,
                             14172.488000000005,
                             13824.0,
                             13481.272,
                             13144.256000000001,
                             12812.904000000004,
                             12487.168000000005,
                             12167.0,
                             11852.352,
                             11543.176000000003,
                             11239.424000000003,
                             10941.048000000004,
                             10648.0,
                             10360.232,
                             10077.696000000002,
                             9800.3440000000028,
                             9528.1280000000042,
                             9261.0,
                             8998.912,
                             8741.8160000000025,
                             8489.6640000000025,
                             8242.4080000000031,
                             8000.0,
                             7762.3920000000007,
                             7529.5360000000019,
                             7301.3840000000027,
                             7077.8880000000026,
                             6859.0,
                             6644.6720000000005,
                             6434.8560000000016,
                             6229.5040000000026,
                             6028.5679999999993,
                             5832.0,
                             5639.752,
                             5451.7760000000017,
                             5268.0240000000022,
                             5088.4479999999994,
                             4913.0,
                             4741.6320000000005,
                             4574.2960000000012,
                             4410.9440000000013,
                             4251.5279999999993,
                             4096.0,
                             3944.3120000000004,
                             3796.4160000000011,
                             3652.264,
                             3511.8080000000009,
                             3375.0,
                             3241.7920000000004,
                             3112.1360000000009,
                             2985.9840000000004,
                             2863.2880000000005,
                             2744.0,
                             2628.072,
                             2515.456000000001,
                             2406.1040000000003,
                             2299.9680000000008,
                             2197.0,
                             2097.1520000000005,
                             2000.3760000000007,
                             1906.6240000000003,
                             1815.8480000000004,
                             1728.0,
                             1643.0320000000002,
                             1560.8960000000006,
                             1481.544,
                             1404.9280000000003,
                             1331.0,
                             1259.7120000000002,
                             1191.0160000000005,
                             1124.864,
                             1061.2080000000003,
                             1000.0,
                             941.19200000000023,
                             884.73600000000033,
                             830.58400000000006,
                             778.68800000000033,
                             729.0,
                             681.47200000000021,
                             636.05599999999993,
                             592.70400000000006,
                             551.36800000000017,
                             512.0,
                             474.55200000000013,
                             438.97600000000011,
                             405.22400000000005,
                             373.24800000000005,
                             343.0,
                             314.43200000000013,
                             287.49600000000009,
                             262.14400000000006,
                             238.32800000000003,
                             216.0,
                             195.11200000000008,
                             175.61600000000004,
                             157.46400000000003,
                             140.608,
                             125.0,
                             110.59200000000004,
                             97.336000000000041,
                             85.184000000000026,
                             74.088000000000008,
                             64.0,
                             54.872000000000014,
                             46.656000000000006,
                             39.304000000000016,
                             32.768000000000008,
                             27.0,
                             21.952000000000005,
                             17.576,
                             13.824000000000005,
                             10.648000000000003,
                             8.0,
                             5.8320000000000007,
                             4.096000000000001,
                             2.7440000000000007,
                             1.7280000000000006,
                             1.0,
                             0.51200000000000012,
                             0.21600000000000008,
                             0.064000000000000015,
                             0.0080000000000000019,
                             0.0,
                             -0.0080000000000000019,
                             -0.064000000000000015,
                             -0.21600000000000008,
                             -0.51200000000000012,
                             -1.0,
                             -1.7280000000000006,
                             -2.7440000000000007,
                             -4.096000000000001,
                             -5.8320000000000007,
                             -8.0,
                             -10.648000000000003,
                             -13.824000000000005,
                             -17.576,
                             -21.952000000000005,
                             -27.0,
                             -32.768000000000008,
                             -39.304000000000016,
                             -46.656000000000006,
                             -54.872000000000014,
                             -64.0,
                             -74.088000000000008,
                             -85.184000000000026,
                             -97.336000000000041,
                             -110.59200000000004,
                             -125.0,
                             -140.608,
                             -157.46400000000003,
                             -175.61600000000004,
                             -195.11200000000008,
                             -216.0,
                             -238.32800000000003,
                             -262.14400000000006,
                             -287.49600000000009,
                             -314.43200000000013,
                             -343.0,
                             -373.24800000000005,
                             -405.22400000000005,
                             -438.97600000000011,
                             -474.55200000000013,
                             -512.0,
                             -551.36800000000017,
                             -592.70400000000006,
                             -636.05599999999993,
                             -681.47200000000021,
                             -729.0,
                             -778.68800000000033,
                             -830.58400000000006,
                             -884.73600000000033,
                             -941.19200000000023,
                             -1000.0,
                             -1061.2080000000003,
                             -1124.864,
                             -1191.0160000000005,
                             -1259.7120000000002,
                             -1331.0,
                             -1404.9280000000003,
                             -1481.544,
                             -1560.8960000000006,
                             -1643.0320000000002,
                             -1728.0,
                             -1815.8480000000004,
                             -1906.6240000000003,
                             -2000.3760000000007,
                             -2097.1520000000005,
                             -2197.0,
                             -2299.9680000000008,
                             -2406.1040000000003,
                             -2515.456000000001,
                             -2628.072,
                             -2744.0,
                             -2863.2880000000005,
                             -2985.9840000000004,
                             -3112.1360000000009,
                             -3241.7920000000004,
                             -3375.0,
                             -3511.8080000000009,
                             -3652.264,
                             -3796.4160000000011,
                             -3944.3120000000004,
                             -4096.0,
                             -4251.5279999999993,
                             -4410.9440000000013,
                             -4574.2960000000012,
                             -4741.6320000000005,
                             -4913.0,
                             -5088.4479999999994,
                             -5268.0240000000022,
                             -5451.7760000000017,
                             -5639.752,
                             -5832.0,
                             -6028.5679999999993,
                             -6229.5040000000026,
                             -6434.8560000000016,
                             -6644.6720000000005,
                             -6859.0,
                             -7077.8880000000026,
                             -7301.3840000000027,
                             -7529.5360000000019,
                             -7762.3920000000007,
                             -8000.0,
                             -8242.4080000000031,
                             -8489.6640000000025,
                             -8741.8160000000025,
                             -8998.912,
                             -9261.0,
                             -9528.1280000000042,
                             -9800.3440000000028,
                             -10077.696000000002,
                             -10360.232,
                             -10648.0,
                             -10941.048000000004,
                             -11239.424000000003,
                             -11543.176000000003,
                             -11852.352,
                             -12167.0,
                             -12487.168000000005,
                             -12812.904000000004,
                             -13144.256000000001,
                             -13481.272,
                             -13824.0,
                             -14172.488000000005,
                             -14526.784000000003,
                             -14886.936000000003,
                             -15252.992000000002,
                             -15625.0};
  static const double b_b[251]{625.0,
                               615.04000000000008,
                               605.16000000000008,
                               595.36000000000013,
                               585.6400000000001,
                               576.0,
                               566.44,
                               556.96,
                               547.56000000000006,
                               538.24000000000012,
                               529.0,
                               519.84,
                               510.76000000000005,
                               501.7600000000001,
                               492.84000000000015,
                               484.0,
                               475.24,
                               466.56000000000006,
                               457.96000000000009,
                               449.44000000000011,
                               441.0,
                               432.64000000000004,
                               424.36000000000007,
                               416.16000000000008,
                               408.04000000000013,
                               400.0,
                               392.04,
                               384.16000000000008,
                               376.36000000000007,
                               368.6400000000001,
                               361.0,
                               353.44000000000005,
                               345.96000000000004,
                               338.56000000000006,
                               331.23999999999995,
                               324.0,
                               316.84000000000003,
                               309.76000000000005,
                               302.76000000000005,
                               295.84,
                               289.0,
                               282.24,
                               275.56000000000006,
                               268.96000000000009,
                               262.44,
                               256.0,
                               249.64000000000001,
                               243.36000000000004,
                               237.16000000000003,
                               231.04000000000002,
                               225.0,
                               219.04000000000002,
                               213.16000000000005,
                               207.36,
                               201.64000000000004,
                               196.0,
                               190.44000000000003,
                               184.96000000000004,
                               179.56,
                               174.24000000000004,
                               169.0,
                               163.84000000000003,
                               158.76000000000005,
                               153.76000000000002,
                               148.84000000000003,
                               144.0,
                               139.24,
                               134.56000000000003,
                               129.96,
                               125.44000000000003,
                               121.0,
                               116.64000000000001,
                               112.36000000000003,
                               108.16000000000001,
                               104.04000000000002,
                               100.0,
                               96.04000000000002,
                               92.160000000000025,
                               88.360000000000014,
                               84.640000000000015,
                               81.0,
                               77.440000000000012,
                               73.96,
                               70.56,
                               67.240000000000023,
                               64.0,
                               60.840000000000011,
                               57.760000000000005,
                               54.760000000000005,
                               51.84,
                               49.0,
                               46.240000000000009,
                               43.560000000000009,
                               40.960000000000008,
                               38.440000000000005,
                               36.0,
                               33.640000000000008,
                               31.360000000000007,
                               29.160000000000004,
                               27.040000000000003,
                               25.0,
                               23.040000000000006,
                               21.160000000000004,
                               19.360000000000003,
                               17.64,
                               16.0,
                               14.440000000000001,
                               12.96,
                               11.560000000000002,
                               10.240000000000002,
                               9.0,
                               7.8400000000000016,
                               6.7600000000000007,
                               5.7600000000000016,
                               4.8400000000000007,
                               4.0,
                               3.24,
                               2.5600000000000005,
                               1.9600000000000004,
                               1.4400000000000004,
                               1.0,
                               0.64000000000000012,
                               0.3600000000000001,
                               0.16000000000000003,
                               0.040000000000000008,
                               0.0,
                               0.040000000000000008,
                               0.16000000000000003,
                               0.3600000000000001,
                               0.64000000000000012,
                               1.0,
                               1.4400000000000004,
                               1.9600000000000004,
                               2.5600000000000005,
                               3.24,
                               4.0,
                               4.8400000000000007,
                               5.7600000000000016,
                               6.7600000000000007,
                               7.8400000000000016,
                               9.0,
                               10.240000000000002,
                               11.560000000000002,
                               12.96,
                               14.440000000000001,
                               16.0,
                               17.64,
                               19.360000000000003,
                               21.160000000000004,
                               23.040000000000006,
                               25.0,
                               27.040000000000003,
                               29.160000000000004,
                               31.360000000000007,
                               33.640000000000008,
                               36.0,
                               38.440000000000005,
                               40.960000000000008,
                               43.560000000000009,
                               46.240000000000009,
                               49.0,
                               51.84,
                               54.760000000000005,
                               57.760000000000005,
                               60.840000000000011,
                               64.0,
                               67.240000000000023,
                               70.56,
                               73.96,
                               77.440000000000012,
                               81.0,
                               84.640000000000015,
                               88.360000000000014,
                               92.160000000000025,
                               96.04000000000002,
                               100.0,
                               104.04000000000002,
                               108.16000000000001,
                               112.36000000000003,
                               116.64000000000001,
                               121.0,
                               125.44000000000003,
                               129.96,
                               134.56000000000003,
                               139.24,
                               144.0,
                               148.84000000000003,
                               153.76000000000002,
                               158.76000000000005,
                               163.84000000000003,
                               169.0,
                               174.24000000000004,
                               179.56,
                               184.96000000000004,
                               190.44000000000003,
                               196.0,
                               201.64000000000004,
                               207.36,
                               213.16000000000005,
                               219.04000000000002,
                               225.0,
                               231.04000000000002,
                               237.16000000000003,
                               243.36000000000004,
                               249.64000000000001,
                               256.0,
                               262.44,
                               268.96000000000009,
                               275.56000000000006,
                               282.24,
                               289.0,
                               295.84,
                               302.76000000000005,
                               309.76000000000005,
                               316.84000000000003,
                               324.0,
                               331.23999999999995,
                               338.56000000000006,
                               345.96000000000004,
                               353.44000000000005,
                               361.0,
                               368.6400000000001,
                               376.36000000000007,
                               384.16000000000008,
                               392.04,
                               400.0,
                               408.04000000000013,
                               416.16000000000008,
                               424.36000000000007,
                               432.64000000000004,
                               441.0,
                               449.44000000000011,
                               457.96000000000009,
                               466.56000000000006,
                               475.24,
                               484.0,
                               492.84000000000015,
                               501.7600000000001,
                               510.76000000000005,
                               519.84,
                               529.0,
                               538.24000000000012,
                               547.56000000000006,
                               556.96,
                               566.44,
                               576.0,
                               585.6400000000001,
                               595.36000000000013,
                               605.16000000000008,
                               615.04000000000008,
                               625.0};
  static const double dv4[251]{25.0,
                               24.8,
                               24.6,
                               24.400000000000002,
                               24.200000000000003,
                               24.0,
                               23.8,
                               23.6,
                               23.400000000000002,
                               23.200000000000003,
                               23.0,
                               22.8,
                               22.6,
                               22.400000000000002,
                               22.200000000000003,
                               22.0,
                               21.8,
                               21.6,
                               21.400000000000002,
                               21.200000000000003,
                               21.0,
                               20.8,
                               20.6,
                               20.400000000000002,
                               20.200000000000003,
                               20.0,
                               19.8,
                               19.6,
                               19.400000000000002,
                               19.200000000000003,
                               19.0,
                               18.8,
                               18.6,
                               18.400000000000002,
                               18.2,
                               18.0,
                               17.8,
                               17.6,
                               17.400000000000002,
                               17.2,
                               17.0,
                               16.8,
                               16.6,
                               16.400000000000002,
                               16.2,
                               16.0,
                               15.8,
                               15.600000000000001,
                               15.4,
                               15.200000000000001,
                               15.0,
                               14.8,
                               14.600000000000001,
                               14.4,
                               14.200000000000001,
                               14.0,
                               13.8,
                               13.600000000000001,
                               13.4,
                               13.200000000000001,
                               13.0,
                               12.8,
                               12.600000000000001,
                               12.4,
                               12.200000000000001,
                               12.0,
                               11.8,
                               11.600000000000001,
                               11.4,
                               11.200000000000001,
                               11.0,
                               10.8,
                               10.600000000000001,
                               10.4,
                               10.200000000000001,
                               10.0,
                               9.8,
                               9.6000000000000014,
                               9.4,
                               9.2000000000000011,
                               9.0,
                               8.8,
                               8.6,
                               8.4,
                               8.2000000000000011,
                               8.0,
                               7.8000000000000007,
                               7.6000000000000005,
                               7.4,
                               7.2,
                               7.0,
                               6.8000000000000007,
                               6.6000000000000005,
                               6.4,
                               6.2,
                               6.0,
                               5.8000000000000007,
                               5.6000000000000005,
                               5.4,
                               5.2,
                               5.0,
                               4.8000000000000007,
                               4.6000000000000005,
                               4.4,
                               4.2,
                               4.0,
                               3.8000000000000003,
                               3.6,
                               3.4000000000000004,
                               3.2,
                               3.0,
                               2.8000000000000003,
                               2.6,
                               2.4000000000000004,
                               2.2,
                               2.0,
                               1.8,
                               1.6,
                               1.4000000000000001,
                               1.2000000000000002,
                               1.0,
                               0.8,
                               0.60000000000000009,
                               0.4,
                               0.2,
                               0.0,
                               -0.2,
                               -0.4,
                               -0.60000000000000009,
                               -0.8,
                               -1.0,
                               -1.2000000000000002,
                               -1.4000000000000001,
                               -1.6,
                               -1.8,
                               -2.0,
                               -2.2,
                               -2.4000000000000004,
                               -2.6,
                               -2.8000000000000003,
                               -3.0,
                               -3.2,
                               -3.4000000000000004,
                               -3.6,
                               -3.8000000000000003,
                               -4.0,
                               -4.2,
                               -4.4,
                               -4.6000000000000005,
                               -4.8000000000000007,
                               -5.0,
                               -5.2,
                               -5.4,
                               -5.6000000000000005,
                               -5.8000000000000007,
                               -6.0,
                               -6.2,
                               -6.4,
                               -6.6000000000000005,
                               -6.8000000000000007,
                               -7.0,
                               -7.2,
                               -7.4,
                               -7.6000000000000005,
                               -7.8000000000000007,
                               -8.0,
                               -8.2000000000000011,
                               -8.4,
                               -8.6,
                               -8.8,
                               -9.0,
                               -9.2000000000000011,
                               -9.4,
                               -9.6000000000000014,
                               -9.8,
                               -10.0,
                               -10.200000000000001,
                               -10.4,
                               -10.600000000000001,
                               -10.8,
                               -11.0,
                               -11.200000000000001,
                               -11.4,
                               -11.600000000000001,
                               -11.8,
                               -12.0,
                               -12.200000000000001,
                               -12.4,
                               -12.600000000000001,
                               -12.8,
                               -13.0,
                               -13.200000000000001,
                               -13.4,
                               -13.600000000000001,
                               -13.8,
                               -14.0,
                               -14.200000000000001,
                               -14.4,
                               -14.600000000000001,
                               -14.8,
                               -15.0,
                               -15.200000000000001,
                               -15.4,
                               -15.600000000000001,
                               -15.8,
                               -16.0,
                               -16.2,
                               -16.400000000000002,
                               -16.6,
                               -16.8,
                               -17.0,
                               -17.2,
                               -17.400000000000002,
                               -17.6,
                               -17.8,
                               -18.0,
                               -18.2,
                               -18.400000000000002,
                               -18.6,
                               -18.8,
                               -19.0,
                               -19.200000000000003,
                               -19.400000000000002,
                               -19.6,
                               -19.8,
                               -20.0,
                               -20.200000000000003,
                               -20.400000000000002,
                               -20.6,
                               -20.8,
                               -21.0,
                               -21.200000000000003,
                               -21.400000000000002,
                               -21.6,
                               -21.8,
                               -22.0,
                               -22.200000000000003,
                               -22.400000000000002,
                               -22.6,
                               -22.8,
                               -23.0,
                               -23.200000000000003,
                               -23.400000000000002,
                               -23.6,
                               -23.8,
                               -24.0,
                               -24.200000000000003,
                               -24.400000000000002,
                               -24.6,
                               -24.8,
                               -25.0};
  static const double varargin_1[251]{25.0,
                                      24.8,
                                      24.6,
                                      24.400000000000002,
                                      24.200000000000003,
                                      24.0,
                                      23.8,
                                      23.6,
                                      23.400000000000002,
                                      23.200000000000003,
                                      23.0,
                                      22.8,
                                      22.6,
                                      22.400000000000002,
                                      22.200000000000003,
                                      22.0,
                                      21.8,
                                      21.6,
                                      21.400000000000002,
                                      21.200000000000003,
                                      21.0,
                                      20.8,
                                      20.6,
                                      20.400000000000002,
                                      20.200000000000003,
                                      20.0,
                                      19.8,
                                      19.6,
                                      19.400000000000002,
                                      19.200000000000003,
                                      19.0,
                                      18.8,
                                      18.6,
                                      18.400000000000002,
                                      18.2,
                                      18.0,
                                      17.8,
                                      17.6,
                                      17.400000000000002,
                                      17.2,
                                      17.0,
                                      16.8,
                                      16.6,
                                      16.400000000000002,
                                      16.2,
                                      16.0,
                                      15.8,
                                      15.600000000000001,
                                      15.4,
                                      15.200000000000001,
                                      15.0,
                                      14.8,
                                      14.600000000000001,
                                      14.4,
                                      14.200000000000001,
                                      14.0,
                                      13.8,
                                      13.600000000000001,
                                      13.4,
                                      13.200000000000001,
                                      13.0,
                                      12.8,
                                      12.600000000000001,
                                      12.4,
                                      12.200000000000001,
                                      12.0,
                                      11.8,
                                      11.600000000000001,
                                      11.4,
                                      11.200000000000001,
                                      11.0,
                                      10.8,
                                      10.600000000000001,
                                      10.4,
                                      10.200000000000001,
                                      10.0,
                                      9.8,
                                      9.6000000000000014,
                                      9.4,
                                      9.2000000000000011,
                                      9.0,
                                      8.8,
                                      8.6,
                                      8.4,
                                      8.2000000000000011,
                                      8.0,
                                      7.8000000000000007,
                                      7.6000000000000005,
                                      7.4,
                                      7.2,
                                      7.0,
                                      6.8000000000000007,
                                      6.6000000000000005,
                                      6.4,
                                      6.2,
                                      6.0,
                                      5.8000000000000007,
                                      5.6000000000000005,
                                      5.4,
                                      5.2,
                                      5.0,
                                      4.8000000000000007,
                                      4.6000000000000005,
                                      4.4,
                                      4.2,
                                      4.0,
                                      3.8000000000000003,
                                      3.6,
                                      3.4000000000000004,
                                      3.2,
                                      3.0,
                                      2.8000000000000003,
                                      2.6,
                                      2.4000000000000004,
                                      2.2,
                                      2.0,
                                      1.8,
                                      1.6,
                                      1.4000000000000001,
                                      1.2000000000000002,
                                      1.0,
                                      0.8,
                                      0.60000000000000009,
                                      0.4,
                                      0.2,
                                      0.0,
                                      -0.2,
                                      -0.4,
                                      -0.60000000000000009,
                                      -0.8,
                                      -1.0,
                                      -1.2000000000000002,
                                      -1.4000000000000001,
                                      -1.6,
                                      -1.8,
                                      -2.0,
                                      -2.2,
                                      -2.4000000000000004,
                                      -2.6,
                                      -2.8000000000000003,
                                      -3.0,
                                      -3.2,
                                      -3.4000000000000004,
                                      -3.6,
                                      -3.8000000000000003,
                                      -4.0,
                                      -4.2,
                                      -4.4,
                                      -4.6000000000000005,
                                      -4.8000000000000007,
                                      -5.0,
                                      -5.2,
                                      -5.4,
                                      -5.6000000000000005,
                                      -5.8000000000000007,
                                      -6.0,
                                      -6.2,
                                      -6.4,
                                      -6.6000000000000005,
                                      -6.8000000000000007,
                                      -7.0,
                                      -7.2,
                                      -7.4,
                                      -7.6000000000000005,
                                      -7.8000000000000007,
                                      -8.0,
                                      -8.2000000000000011,
                                      -8.4,
                                      -8.6,
                                      -8.8,
                                      -9.0,
                                      -9.2000000000000011,
                                      -9.4,
                                      -9.6000000000000014,
                                      -9.8,
                                      -10.0,
                                      -10.200000000000001,
                                      -10.4,
                                      -10.600000000000001,
                                      -10.8,
                                      -11.0,
                                      -11.200000000000001,
                                      -11.4,
                                      -11.600000000000001,
                                      -11.8,
                                      -12.0,
                                      -12.200000000000001,
                                      -12.4,
                                      -12.600000000000001,
                                      -12.8,
                                      -13.0,
                                      -13.200000000000001,
                                      -13.4,
                                      -13.600000000000001,
                                      -13.8,
                                      -14.0,
                                      -14.200000000000001,
                                      -14.4,
                                      -14.600000000000001,
                                      -14.8,
                                      -15.0,
                                      -15.200000000000001,
                                      -15.4,
                                      -15.600000000000001,
                                      -15.8,
                                      -16.0,
                                      -16.2,
                                      -16.400000000000002,
                                      -16.6,
                                      -16.8,
                                      -17.0,
                                      -17.2,
                                      -17.400000000000002,
                                      -17.6,
                                      -17.8,
                                      -18.0,
                                      -18.2,
                                      -18.400000000000002,
                                      -18.6,
                                      -18.8,
                                      -19.0,
                                      -19.200000000000003,
                                      -19.400000000000002,
                                      -19.6,
                                      -19.8,
                                      -20.0,
                                      -20.200000000000003,
                                      -20.400000000000002,
                                      -20.6,
                                      -20.8,
                                      -21.0,
                                      -21.200000000000003,
                                      -21.400000000000002,
                                      -21.6,
                                      -21.8,
                                      -22.0,
                                      -22.200000000000003,
                                      -22.400000000000002,
                                      -22.6,
                                      -22.8,
                                      -23.0,
                                      -23.200000000000003,
                                      -23.400000000000002,
                                      -23.6,
                                      -23.8,
                                      -24.0,
                                      -24.200000000000003,
                                      -24.400000000000002,
                                      -24.6,
                                      -24.8,
                                      -25.0};
  static const double b_varargin_1[61]{6.0,
                                       5.8000000000000007,
                                       5.6000000000000005,
                                       5.4,
                                       5.2,
                                       5.0,
                                       4.8000000000000007,
                                       4.6000000000000005,
                                       4.4,
                                       4.2,
                                       4.0,
                                       3.8000000000000003,
                                       3.6,
                                       3.4000000000000004,
                                       3.2,
                                       3.0,
                                       2.8000000000000003,
                                       2.6,
                                       2.4000000000000004,
                                       2.2,
                                       2.0,
                                       1.8,
                                       1.6,
                                       1.4000000000000001,
                                       1.2000000000000002,
                                       1.0,
                                       0.8,
                                       0.60000000000000009,
                                       0.4,
                                       0.2,
                                       0.0,
                                       -0.2,
                                       -0.4,
                                       -0.60000000000000009,
                                       -0.8,
                                       -1.0,
                                       -1.2000000000000002,
                                       -1.4000000000000001,
                                       -1.6,
                                       -1.8,
                                       -2.0,
                                       -2.2,
                                       -2.4000000000000004,
                                       -2.6,
                                       -2.8000000000000003,
                                       -3.0,
                                       -3.2,
                                       -3.4000000000000004,
                                       -3.6,
                                       -3.8000000000000003,
                                       -4.0,
                                       -4.2,
                                       -4.4,
                                       -4.6000000000000005,
                                       -4.8000000000000007,
                                       -5.0,
                                       -5.2,
                                       -5.4,
                                       -5.6000000000000005,
                                       -5.8000000000000007,
                                       -6.0};
  static const double dv1[25]{0.0001,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0001,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              3.0461741978670866E-8,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0004,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              6.8538919452009421E-6};
  static const double dv3[25]{0.0001,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0001,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              6.8538919452009418E-8,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0004,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0,
                              0.0004};
  static const double dv2[9]{
      25.0, 0.0, 0.0, 0.0, 25.0, 0.0, 0.0, 0.0, 0.27415567780803768};
  static double empty_black_image[275598];
  static double dv[79744];
  static double Rx[15311];
  static double Ry[15311];
  static int ii_data[15311];
  double X_pred[1600];
  double Training_data_data[896];
  double old_P_ctrv[800];
  double old_P_cv[800];
  double c_varargin_1[255];
  double d_varargin_1[251];
  double P_ctrv_tmp[250];
  double P_cv_tmp[250];
  double xp1[100];
  double xp2[100];
  double xp3[100];
  double xp4[100];
  double yp1[100];
  double yp2[100];
  double yp3[100];
  double yp4[100];
  double TJ_X[70];
  double TJ_Y[70];
  double e_varargin_1[61];
  double old_Prob_ctrv[32];
  double old_Prob_cv[32];
  double old_flag_data[32];
  double P_c[25];
  double P_ctrv_old[25];
  double P_ctrv_out[25];
  double P_cv_old[25];
  double P_cv_out[25];
  double TV_range_x[10];
  double TV_range_y[10];
  double laneInfoR[5];
  double tmp_target_x[5];
  double tmp_target_y[5];
  double x_cv[5];
  double x_ini[5];
  double y_out[3];
  double Training_data[2];
  double Distance_to_Leftlane;
  double Distance_to_Rightlane;
  double Prob_cv;
  double c_ctrv;
  double d;
  double d1;
  double mu_ctrv;
  double t;
  double target_vel_x;
  double target_vel_y;
  double tmp_TLC;
  double tmp_TTC;
  double v_e;
  int jj_data[15311];
  int DEC_param;
  int I_LAT_uint8;
  int b_i;
  int i;
  int jj_size;
  volatile int track_number;
  unsigned char u11;
  unsigned char u13;
  unsigned char u15;
  unsigned char u17;
  unsigned char u19;
  unsigned char u9;
  bool a__13[15311];
  bool in_tmp[15311];
  if (!isInitialized_BEV_image) {
    BEV_image_initialize();
  }
  // function
  // [BEV_image,State,out_Prob_ctrv,out_Prob_cv,out_P_ctrv,out_P_cv,flag] =
  // BEV_image(Chassis, Traffic, Lane,
  // AEB_in,old_State,old_Prob_ctrv,old_Prob_cv,old_P_ctrv,old_P_cv,old_flag)
  //  p.145
  //
  //  l 564
  //
  //
  //  l 454
  if (!out_Prob_ctrv_not_empty) {
    for (i = 0; i < 32; i++) {
      old_Prob_ctrv[i] = 0.8;
      old_Prob_cv[i] = 0.2;
      out_Prob_cv[i] = 0.2;
      out_Prob_ctrv[i] = 0.8;
    }
    out_Prob_ctrv_not_empty = true;
    // flag        = coder.nullcopy(zeros(15,1));
  } else {
    std::copy(&out_Prob_ctrv[0], &out_Prob_ctrv[32], &old_Prob_ctrv[0]);
    std::copy(&out_Prob_cv[0], &out_Prob_cv[32], &old_Prob_cv[0]);
    std::copy(&out_P_ctrv[0], &out_P_ctrv[800], &old_P_ctrv[0]);
    std::copy(&out_P_cv[0], &out_P_cv[800], &old_P_cv[0]);
    std::copy(&flag[0], &flag[32], &old_flag_data[0]);
  }
  //  CarMaker data의 sample time
  //  Input Parameter
  //  Chassis
  // Sensor
  //  Traffic
  //  Lane
  //
  // Training_data                                            = zeros(1,
  // STATE_LENGTH);
  //  Switch
  //  CarMaker에서 생성한 data에 threat metric을 추가하여 BEV Window 생성, 저장
  //  저장된 BEV Window를 학습이 가능하도록 annotation 별로 분류
  //  저장된 BEV Window를 이용하여 Image Augmentation 하여 학습데이터 추가
  //  학습
  //  0 = 전방위 인지, 1 = FOV 적용
  //  BEV Window 생성 Parameter
  //  누적하는 궤적의 길이 (s)
  //  impact 전 첫 BEV window를 생성할 시점 (s)
  //  흑백 image
  //  컬러 image -> State (I_Lat, Velocity, Heading)
  //  Image_Channel_1일 경우 아래 2개중 하나 선택
  //  Image X 축의 크기 (pixel)
  //  Image Y 축의 크기 (pixel)
  //  m
  //  m
  //  m
  //  m
  //
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //  이 line 이후로는 코드 실행 전 수정할 필요 없음
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //  Sample_Time = 0.01; % CarMaker data의 sample time
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //  BEV Window Parameter
  //  if Image_Channel_1 == 0
  //      Only_Position_for_Channel = 0;
  //      Only_I_Lat_for_Channel = 0;
  //  end
  //  Crash data 중 lateral collision index(I_lat) > threshold 조건을 만족하면
  //  training set으로 저장 I_Lat_Threshold = 0.514687775463802; % SVM 학습을
  //  통해 구한 I_Lat threshold SVM 학습을 통해 구한 I_Lat threshold Unsafe data
  //  의 BEV Window가 저장되는 sample time Safe data 의 BEV Window가 저장되는
  //  sample time elseif Image_Channel_12 % 1:3(AEB),4:6(DEC),7:9(ES),10:12(ELC)
  //    IMAGE_Z = 3;
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //  BEV Window Normalization Parameter
  //  m
  //  m
  //  rad
  //  rad
  //  s
  //  s
  //  s
  //  s
  //  s
  //  s
  //  empty_black_image = uint8(coder.nullcopy(zeros(IMAGE_X, IMAGE_Y,
  //  IMAGE_Z));
  //
  // BEV_image = coder.nullcopy(zeros(IMAGE_X, IMAGE_Y, IMAGE_Z);
  //  Threat Parameter
  // 상대차 최대감속도
  // 자차 최소감속도
  // 자차 최대가속도
  // 상대차 제동시간 (Vo -> zero)
  // 횡방향 최대가속도
  // 횡방향 최소감속도
  // 상대차 제동시간 (Vo -> zero)
  // 횡방향 마진
  // 무게중심에서 전륜까지의 거리
  // 차량 너비
  //  AddThreatMetricMultiTarget_Predict_Trajectory.m 의 Parameter
  //       [rad]              Global heading angle
  //       [m]                Global longitudinal position
  //       [m]                Global lateral position
  //       [m/s]              absolute velocity
  //       [m/s^2]
  //      [m/s]
  //      [m/s]
  //  CLASS B
  //       [rad]                                            global 좌표계에서의
  //       heading angle [m] position = 뒷범퍼 중심 [m] [m/s] [m/s] [m] [m]
  //      [m]
  //      [m]
  //      [m/s]
  //      [m/s]
  //      [rad]
  //  Description
  //                       Class_B 에서 출력되는 최대 state 개수
  //                        Preprocessing 에서 추가될 state 개수
  //  Road
  //      [m]
  //      [1/m]
  //      [rad]
  //      [m]
  //      [m]
  //  ROAD.PREPROCESSING.STATE_NUMBER                    =
  //  length(fieldnames(ROAD.PREPROCESSING)); Line
  //      [1/m^2]
  //      [1/m]
  //      [rad]
  //      [m]
  //      [1/m^2]
  //      [1/m]
  //  Initialization
  //  Traffic Coodinate Transform
  //   this part will be changed
  //  Fr0(global)
  //  Fr0(global)
  //  wheel velocity
  //  Fr1(body fixed)
  //  Fr1(body fixed)
  //  Fr1(body fixed)
  //  Lane distance
  Distance_to_Leftlane = Lane[6];
  Distance_to_Rightlane = Lane[7];
  //  Generation Training data
  track_number = 0;
  for (DEC_param = 0; DEC_param < 32; DEC_param++) {
    for (b_i = 0; b_i < 28; b_i++) {
      std::copy(&State[DEC_param * 2520 + b_i * 90],
                &State[static_cast<int>((DEC_param * 2520 + b_i * 90) + 89U)],
                &dv[DEC_param * 2492 + b_i * 89]);
      std::copy(&dv[DEC_param * 2492 + b_i * 89],
                &dv[static_cast<int>((DEC_param * 2492 + b_i * 89) + 89U)],
                &State[(DEC_param * 2520 + b_i * 90) + 1]);
    }
    d = Traffic[9 * DEC_param + 4];
    d1 = Traffic[9 * DEC_param + 3];
    //      Class_B(CLASS_B.PREPROCESSING.HEADING_ANGLE, track_number) =
    //      (Class_B(CLASS_B.MEASURE.GLO_HEADING_ANGLE, track_number)
    //      -In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE, 1));
    //
    //      X_FrontCenter_A =
    //      EGO_CG2_FRONT_BUMPER.*cos(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_POS_X, 1);
    //      Y_FrontCenter_A =
    //      EGO_CG2_FRONT_BUMPER.*sin(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_POS_Y, 1);
    //
    //      X_AB = Class_B(CLASS_B.MEASURE.GLO_POS_X, track_number) -
    //      X_FrontCenter_A; Y_AB = Class_B(CLASS_B.MEASURE.GLO_POS_Y,
    //      track_number) - Y_FrontCenter_A;
    //
    //      x_AB = X_AB .*
    //      cos(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + Y_AB .*
    //      sin(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)); y_AB = -X_AB .*
    //      sin(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + Y_AB .*
    //      cos(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1));
    //
    //      Class_B(CLASS_B.PREPROCESSING.REL_POS_Y, track_number) = y_AB;
    //      Class_B(CLASS_B.PREPROCESSING.REL_POS_X, track_number) = x_AB;
    //
    //      Class_B(CLASS_B.PREPROCESSING.REL_VEL_X, track_number) =
    //      Class_B(CLASS_B.MEASURE.GLO_VEL_X, track_number) .*
    //      cos(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + Class_B(CLASS_B.MEASURE.GLO_VEL_Y,
    //      track_number).*sin(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) - In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.LONG_VEL, 1);
    //      Class_B(CLASS_B.PREPROCESSING.REL_VEL_Y, track_number) =
    //      -Class_B(CLASS_B.MEASURE.GLO_VEL_X, track_number) .*
    //      sin(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + Class_B(CLASS_B.MEASURE.GLO_VEL_Y,
    //      track_number).*cos(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) - In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.LAT_VEL, 1);
    track_number = DEC_param;
    Training_data_data[28 * DEC_param + 1] = Chassis[10];
    Training_data_data[28 * DEC_param + 2] = Chassis[9];
    Training_data_data[28 * DEC_param + 5] = Traffic[9 * DEC_param];
    Training_data_data[28 * DEC_param + 6] = Traffic[9 * DEC_param + 1];
    Training_data_data[28 * DEC_param + 7] = d1;
    Training_data_data[28 * DEC_param + 8] = d;
    Training_data_data[28 * DEC_param + 9] = std::sqrt(d1 * d1 + d * d);
    Training_data_data[28 * DEC_param + 10] = Traffic[9 * DEC_param + 2];
    Training_data_data[28 * DEC_param + 3] = Traffic[9 * DEC_param + 8];
    Training_data_data[28 * DEC_param + 4] = Traffic[9 * DEC_param + 7];
  }
  //  IMM-UKF
  //  [y x yaw v yawrate]
  // out_Prob_cv = 0.2 * ones(Traffic_Number,1);
  // out_Prob_ctrv = 0.8 * ones(Traffic_Number,1);
  // out_P_ctrv = coder.nullcopy(zeros(5,5,Traffic_Number));
  // out_P_cv = coder.nullcopy(zeros(5,5,Traffic_Number));
  //  ACC DEC ESL ESR ELCL ELCR ESS
  //  TJ_ELCL=zeros(length(index_time),10);
  //  TJ_ELCR=zeros(length(index_time),10);
  //  TJ_DEC=zeros(length(index_time),10);
  //  TJ_ACC=zeros(length(index_time),10);
  //  for index_time = 1:length(sim_time)
  Training_data[0] = Training_data_data[28 * track_number + 8];
  Training_data[1] = Training_data_data[28 * track_number + 7];
  v_e = coder::b_norm(Training_data);
  //  Fr1(body fixed)
  if (AEB_in == 0.0) {
    DEC_param = 0;
  } else {
    DEC_param = -6;
  }
  //  ACC Y
  //  DEC Y
  //  ESL X
  //  ESL Y
  //  ELCL X
  //  ELCL Y
  //  ESS X
  //  ESS Y
  //  ACC Y

//aes
//  #pragma omp parallel for 
//  for(int i = 0; i<10; ++i) {
//    printf("i %d\n", i);
//  }

  for (i = 0; i < 10; i++) {
    t = (static_cast<double>(i) + 1.0) * 0.2;
    // ESL
    d = 0.14323944878270578 * std::sin(3.2360431875928319 * t) -
        0.46352904242782755 * t;
    TJ_Y[i + 20] = d;
    d1 = t * t;
    tmp_TLC = v_e * t;
    tmp_TTC = tmp_TLC + 0.5 * static_cast<double>(DEC_param) * d1;
    TJ_X[i + 20] = tmp_TTC;
    // ESR
    mu_ctrv = 0.55704230082163364 * std::sin(1.6409734010875878 * t) -
              0.91409159892893144 * t;
    TJ_Y[i + 40] = mu_ctrv;
    c_ctrv = tmp_TLC + 0.5 * static_cast<double>(DEC_param) * d1;
    TJ_X[i + 40] = c_ctrv;
    TJ_X[i] = tmp_TLC + 2.0 * d1;
    TJ_X[i + 10] = tmp_TLC + -5.0 * d1;
    TJ_X[i + 30] = tmp_TTC;
    TJ_Y[i + 30] = -d;
    TJ_X[i + 50] = c_ctrv;
    TJ_Y[i + 50] = -mu_ctrv;
    TJ_X[i + 60] = c_ctrv;
    TJ_Y[i + 60] = mu_ctrv;
    TJ_Y[i] = 0.0;
    TJ_Y[i + 10] = 0.0;
  }
  //  DEC Y
  // flag=coder.nullcopy(zeros(32,1));
// aes
  x_ini[4] = 0.0;
  for (track_number = 0; track_number < 32; track_number++) {
    d = Training_data_data[28 * track_number + 5];
    if ((d >= -25.0) && (d <= 25.0)) {
      d1 = Training_data_data[28 * track_number + 6];
      if ((d1 >= -6.0) && (d1 <= 6.0)) {
        flag[track_number] = 1.0;
      } else {
        flag[track_number] = 0.0;
      }
    } else {
      flag[track_number] = 0.0;
    }
    d1 = Training_data_data[28 * track_number + 6];
    y_out[0] = d1;
    y_out[1] = d;
    tmp_TLC = Training_data_data[28 * track_number + 10];
    y_out[2] = -tmp_TLC;
    Training_data[0] = Training_data_data[28 * track_number + 8];
    Training_data[1] = Training_data_data[28 * track_number + 7];
    x_ini[0] = d1;
    x_ini[1] = d;
    x_ini[2] = -tmp_TLC;
    x_ini[3] = -coder::b_norm(Training_data);
    if ((old_flag_data[track_number] == 0.0) && (flag[track_number] == 1.0)) {
      t = 0.8;
      v_e = 0.2;
    } else {
      t = old_Prob_ctrv[track_number];
      v_e = old_Prob_cv[track_number];
      for (b_i = 0; b_i < 5; b_i++) {
        for (i = 0; i < 5; i++) {
          DEC_param = i + 5 * b_i;
          I_LAT_uint8 = DEC_param + 25 * track_number;
          P_ctrv_old[DEC_param] = old_P_ctrv[I_LAT_uint8];
          P_cv_old[DEC_param] = old_P_cv[I_LAT_uint8];
        }
      }
    }
    // coder.nullcopy(zeros(5,1);
    // coder.nullcopy(zeros(5,1);
    Interacting(t, v_e, x_ini, x_ini, P_ctrv_old, P_cv_old, &c_ctrv, laneInfoR,
                P_ctrv_out, &tmp_TTC, tmp_target_y, P_cv_out);
    //      for sample_ts=1:10
    d = old_flag_data[track_number];
    for (I_LAT_uint8 = 0; I_LAT_uint8 < 2; I_LAT_uint8++) {
      t = (static_cast<double>(I_LAT_uint8) + 1.0) * 0.2;
      for (b_i = 0; b_i < 5; b_i++) {
        tmp_target_x[b_i] = x_ini[b_i];
      }
      std::copy(&dv1[0], &dv1[25], &P_ctrv_old[0]);
      mu_ctrv = CTRV_MODEL(laneInfoR, P_ctrv_out, y_out, tmp_target_x,
                           flag[track_number], d, P_ctrv_old, dv2, t);
      for (i = 0; i < 5; i++) {
        for (b_i = 0; b_i < 5; b_i++) {
          DEC_param = b_i + 5 * i;
          P_ctrv_tmp[DEC_param + 25 * I_LAT_uint8] = P_ctrv_old[DEC_param];
        }
        x_cv[i] = x_ini[i];
      }
      std::copy(&dv3[0], &dv3[25], &P_cv_old[0]);
      v_e = CV_MODEL(tmp_target_y, P_cv_out, y_out, x_cv, flag[track_number], d,
                     P_cv_old, dv2, t);
      for (b_i = 0; b_i < 5; b_i++) {
        for (i = 0; i < 5; i++) {
          DEC_param = i + 5 * b_i;
          P_cv_tmp[DEC_param + 25 * I_LAT_uint8] = P_cv_old[DEC_param];
        }
      }
      Mixing(c_ctrv, tmp_target_x, P_ctrv_old, mu_ctrv, tmp_TTC, x_cv, P_cv_old,
             v_e, &t, &Prob_cv,
             *(double(*)[5]) & X_pred[5 * I_LAT_uint8 + 50 * track_number],
             P_c);
      //          [Prob_ctrv,Prob_cv,X_c,P_c] =
      //          Mixing(c_ctrv,x_ctrv,P_ctrv,mu_ctrv,c_cv,x_cv,P_cv,mu_cv);
      if (I_LAT_uint8 + 1 == 1) {
        out_Prob_ctrv[track_number] = t;
        out_Prob_cv[track_number] = Prob_cv;
      }
    }
    for (b_i = 0; b_i < 5; b_i++) {
      for (i = 0; i < 5; i++) {
        DEC_param = i + 5 * b_i;
        I_LAT_uint8 = DEC_param + 25 * track_number;
        out_P_ctrv[I_LAT_uint8] = P_ctrv_tmp[DEC_param];
        out_P_cv[I_LAT_uint8] = P_cv_tmp[DEC_param];
      }
    }
  }
  //  Threat Assessment
  d = Chassis[5];
  d1 = Chassis[6];
  for (track_number = 0; track_number < 32; track_number++) {
    //  Add Threat Metric to Training Data
    t = Training_data_data[28 * track_number + 7];
    target_vel_x = d + t;
    target_vel_y = d1 + Training_data_data[28 * track_number + 8];
    //     %% TTC
    DEC_param = 28 * track_number + 5;
    //  TTC Calculates time to collision in ROI.
    //
    //  TTC_out = TTC(rel_pos_x, rel_pos_y, rel_vel_x, ROI)
    //  rel_pos_x {double} : Relative longitudinal position (m)
    //  rel_pos_y {double} : Relative lateral position (m)
    //  rel_vel_x {double} : Relative longitudinal velocity (m/s)
    //  TTC_PARAM {struct} : Parameters for calculation of TTC
    //                        TTC_PARAM.ROI.Y_MIN : minimum relative lateral
    //                        position of ROI TTC_PARAM.ROI.Y_MAX : maximum
    //                        relative lateral position of ROI
    //                        TTC_PARAM.ROI.X_MIN : minimum relative
    //                        longitudinal position of ROI TTC_PARAM.ROI.X_MAX :
    //                        maximum relative longitudinal position of ROI
    //                        TTC_PARAM.TTC_MAX   : default value for exception
    if (std::abs(Training_data_data[28 * track_number + 6]) <= 2.0) {
      tmp_TTC = -Training_data_data[DEC_param] / t;
    } else {
      tmp_TTC = 11.0;
    }
    if (tmp_TTC < 0.0) {
      tmp_TTC = 11.0;
    }
    v_e = 1.0 / tmp_TTC;
    if (v_e > 100.0) {
      v_e = 100.0;
    }
    Training_data_data[28 * track_number + 11] = tmp_TTC;
    Training_data_data[28 * track_number + 13] = v_e;
    //     %% TLC
    TLC(Training_data_data[28 * track_number + 6],
        Training_data_data[28 * track_number + 8],
        Training_data_data[28 * track_number + 10],
        Training_data_data[28 * track_number + 3],
        Training_data_data[28 * track_number + 4], Distance_to_Leftlane,
        Distance_to_Rightlane, &tmp_TLC, &t);
    v_e = 1.0 / tmp_TLC;
    if (v_e > 100.0) {
      v_e = 100.0;
    }
    Training_data_data[28 * track_number + 12] = tmp_TLC;
    Training_data_data[28 * track_number + 14] = v_e;
    //     %% Ilat (lateral collision index)
    //  lateral: Ilat(combined and single),DLC and TLC
    //  longitudinal : Ilong,dw,dbr,xp and TTC
    //          I_LAT_PARAM.TTC_INVERSE_THRESHOLD=4;
    //          I_LAT_PARAM.A_X_MAX=-10;
    //          I_LAT_PARAM.A_X_MAX=-1;
    I_lat(Training_data_data[28 * track_number + 5],
          Training_data_data[28 * track_number + 6],
          Training_data_data[28 * track_number + 7],
          Training_data_data[28 * track_number + 8], d, target_vel_x,
          Training_data_data[28 * track_number + 10],
          Training_data_data[28 * track_number + 3],
          Training_data_data[28 * track_number + 4],
          Training_data_data[28 * track_number + 2], Distance_to_Leftlane,
          Distance_to_Rightlane, &Training_data_data[28 * track_number + 15],
          &Prob_cv, &tmp_TTC, &v_e, &mu_ctrv, &c_ctrv, &t, &tmp_TLC);
    Training_data_data[28 * track_number + 16] = Prob_cv;
    //          I_LAT_PARAM.A_X_MAX=-10;
    I_lat(Training_data_data[28 * track_number + 5],
          Training_data_data[28 * track_number + 6],
          Training_data_data[28 * track_number + 7],
          Training_data_data[28 * track_number + 8], d, target_vel_x,
          Training_data_data[28 * track_number + 10],
          Training_data_data[28 * track_number + 3],
          Training_data_data[28 * track_number + 4],
          Training_data_data[28 * track_number + 2], Distance_to_Leftlane,
          Distance_to_Rightlane, &Training_data_data[28 * track_number + 27],
          &Prob_cv, &tmp_TTC, &v_e, &mu_ctrv, &c_ctrv, &t, &tmp_TLC);
    Training_data_data[28 * track_number + 26] = Prob_cv;
    //     %% RSS (minimum safe distance x and y)
    RSS_model(Training_data_data[28 * track_number + 5],
              Training_data_data[28 * track_number + 6], d, target_vel_x, d1,
              target_vel_y, &Training_data_data[28 * track_number + 17], &t);
    Training_data_data[28 * track_number + 18] = t;
    //     %% Honda warning and avoidance algorithm (dw,dbr)
    HONDA(Training_data_data[28 * track_number + 5],
          Training_data_data[28 * track_number + 6],
          Training_data_data[28 * track_number + 7], d, target_vel_x, &v_e, &t);
    //  THM(HONDA)
    tmp_TLC = Training_data_data[DEC_param];
    Training_data_data[28 * track_number + 19] = v_e;
    Training_data_data[28 * track_number + 20] = t;
    Training_data_data[28 * track_number + 21] = (tmp_TLC - t) / (v_e - t);
    Training_data_data[28 * track_number + 22] = 0.0;
    Training_data_data[28 * track_number + 23] = 0.0;
    Training_data_data[28 * track_number + 24] = 0.0;
    Training_data_data[28 * track_number + 25] = 0.0;
  }
  //
  for (b_i = 0; b_i < 32; b_i++) {
    for (i = 0; i < 28; i++) {
      State[90 * i + 2520 * b_i] = Training_data_data[i + 28 * b_i];
    }
  }
  //  Output
  x_ini[0] = 6.0 * Lane[0];
  x_ini[1] = 2.0 * Lane[2];
  laneInfoR[0] = 6.0 * Lane[1];
  laneInfoR[1] = 2.0 * Lane[3];
  target_vel_y = coder::internal::minimum(varargin_1);
  target_vel_x = coder::internal::maximum(varargin_1);
  Distance_to_Leftlane = coder::internal::b_minimum(b_varargin_1);
  Distance_to_Rightlane = coder::internal::b_maximum(b_varargin_1);
  coder::meshgrid(varargin_1, b_varargin_1, Rx, Ry);
// aes
  start_bev = clock();

  #pragma omp parallel num_threads(4)
  #pragma omp parallel for
  for (int image_index = 0; image_index < 90; image_index++) {
    int b_image_index;
    b_image_index = image_index;
    start_bev2 = clock();

    for (track_number = 0; track_number < 32; track_number++) {
//aes
      //printf("track_number %d\n", track_number);
      b_i = b_image_index + 2520 * track_number;
      d = State[b_i + 450];
      if (d != 0.0) {
        d1 = State[b_i + 540];
        if ((d1 != 0.0) && (d >= -25.0) && (d <= 25.0) && (d1 >= -6.0) &&
            (d1 <= 6.0)) {
          int bev_image_tmp;
          int k;
          unsigned char u;
          unsigned char u1;
          //                  Heading_Angle = Tmp_State(Data_Backward_index -
          //                  image_index + 1, 5);
          b_image_index = 89;
          //aes
          start_bev3 = clock();
          for (DEC_param = 0; DEC_param < 90; DEC_param++) {
            b_image_index = 89 - DEC_param;
            b_i = DEC_param + 2520 * track_number;
            d = State[b_i + 450];
            if ((d >= target_vel_y) && (d <= target_vel_x)) {
              d1 = State[b_i + 540];
              if ((d1 >= Distance_to_Leftlane) &&
                  (d1 <= Distance_to_Rightlane)) {
                tmp_TLC = State[b_i + 1350];
                for (k = 0; k < 255; k++) {
                  c_varargin_1[k] = std::abs(tmp_TLC - RANGE_I_LAT_RANGE[k]);
                }
                coder::internal::minimum(c_varargin_1, &mu_ctrv, &i);
                //              [~,Image_Position_X] =
                //              min(abs(Tmp_State(Data_Backward_index -
                //              image_index + 1,TRAINING.REL_POS_X) -
                //              RANGE.X_RANGE));
                v_e = std::round(d * -5.0 + 126.0);
                //              [~,Image_Position_Y] =
                //              min(abs(Tmp_State(Data_Backward_index -
                //              image_index + 1,TRAINING.REL_POS_Y) -
                //              RANGE.Y_RANGE));
                t = std::round(d1 * -5.0 + 31.0);
                if (v_e < 1.0) {
                  v_e = 1.0;
                } else if (v_e > 251.0) {
                  v_e = 251.0;
                }
                if (t < 1.0) {
                  t = 1.0;
                } else if (t > 61.0) {
                  t = 61.0;
                }
                //  image에 입력할 때 1을 빼는 이유 : 위에서 min함수 이용해서 각
                //  index를 찾으면 1~256으로 나오지만 image에는 0~255 범위로
                //  입력해야하므로 1을 빼준다
                //                  if CHANNEL.Add_Line_to_BEV_Switch
                if (static_cast<double>(i) - 1.0 < 256.0) {
                  if (static_cast<double>(i) - 1.0 >= 0.0) {
                    u = static_cast<unsigned char>(static_cast<double>(i) -
                                                   1.0);
                    u1 = static_cast<unsigned char>(static_cast<double>(i) -
                                                    1.0);
                  } else {
                    u = 0U;
                    u1 = 0U;
                  }
                } else {
                  u = MAX_uint8_T;
                  u1 = MAX_uint8_T;
                }
                bev_image_tmp =
                    static_cast<int>(static_cast<float>(v_e) +
                                     251.0F * (static_cast<float>(t) - 1.0F));
                bev_image[bev_image_tmp - 1] = u;
                //  R
                bev_image[bev_image_tmp + 45932] = u1;
                //  R
                if (static_cast<double>(i) - 1.0 < 256.0) {
                  if (static_cast<double>(i) - 1.0 >= 0.0) {
                    u = static_cast<unsigned char>(static_cast<double>(i) -
                                                   1.0);
                    u1 = static_cast<unsigned char>(static_cast<double>(i) -
                                                    1.0);
                  } else {
                    u = 0U;
                    u1 = 0U;
                  }
                } else {
                  u = MAX_uint8_T;
                  u1 = MAX_uint8_T;
                }
                bev_image[bev_image_tmp + 91865] = u;
                //  R
                bev_image[bev_image_tmp + 137798] = u1;
                //  R
              }
            }
          }
          //printf("bev_image 3 : %lf\n", (double)(clock()-start_bev3)/CLOCKS_PER_SEC);
          start_bev4 = clock();
          if (!coder::isequal(empty_black_image, bev_image)) {
            //  && track_number == 1
            for (v_e = 0.0; v_e < Lane[8]; v_e++) {
              t = v_e * 3.5;
              for (I_LAT_uint8 = 0; I_LAT_uint8 < 251; I_LAT_uint8++) {
                Prob_cv = (((x_ini[0] * b[I_LAT_uint8] +
                             x_ini[1] * b_b[I_LAT_uint8]) +
                            Lane[4] * varargin_1[I_LAT_uint8]) +
                           Lane[6]) +
                          t;
                d = dv4[I_LAT_uint8];
                if ((d >= target_vel_y) && (d <= target_vel_x) &&
                    (Prob_cv >= Distance_to_Leftlane) &&
                    (Prob_cv <= Distance_to_Rightlane)) {
                  for (k = 0; k < 251; k++) {
                    d_varargin_1[k] =
                        std::abs(dv4[I_LAT_uint8] - varargin_1[k]);
                  }
                  coder::internal::b_minimum(d_varargin_1, &mu_ctrv, &i);
                  for (k = 0; k < 61; k++) {
                    e_varargin_1[k] = std::abs(Prob_cv - b_varargin_1[k]);
                  }
                  coder::internal::c_minimum(e_varargin_1, &mu_ctrv,
                                             &DEC_param);
                  bev_image[(i + 251 * (DEC_param - 1)) + 15310] = MAX_uint8_T;
                }
              }
            }
            for (v_e = 0.0; v_e < Lane[9]; v_e++) {
              t = v_e * 3.5;
              for (I_LAT_uint8 = 0; I_LAT_uint8 < 251; I_LAT_uint8++) {
                Prob_cv = (((laneInfoR[0] * b[I_LAT_uint8] +
                             laneInfoR[1] * b_b[I_LAT_uint8]) +
                            Lane[5] * varargin_1[I_LAT_uint8]) +
                           Lane[7]) -
                          t;
                d = dv4[I_LAT_uint8];
                if ((d >= target_vel_y) && (d <= target_vel_x) &&
                    (Prob_cv >= Distance_to_Leftlane) &&
                    (Prob_cv <= Distance_to_Rightlane)) {
                  for (k = 0; k < 251; k++) {
                    d_varargin_1[k] =
                        std::abs(dv4[I_LAT_uint8] - varargin_1[k]);
                  }
                  coder::internal::b_minimum(d_varargin_1, &mu_ctrv, &i);
                  for (k = 0; k < 61; k++) {
                    e_varargin_1[k] = std::abs(Prob_cv - b_varargin_1[k]);
                  }
                  coder::internal::c_minimum(e_varargin_1, &mu_ctrv,
                                             &DEC_param);
                  bev_image[(i + 251 * (DEC_param - 1)) + 15310] = MAX_uint8_T;
                }
              }
            }
            for (b_i = 0; b_i < 61; b_i++) {
              for (i = 0; i < 251; i++) {
                DEC_param = i + 251 * b_i;
                u = bev_image[DEC_param + 15311];
                bev_image[DEC_param + 61244] = u;
                bev_image[DEC_param + 107177] = u;
                bev_image[DEC_param + 153110] = u;
                bev_image[DEC_param + 199043] = u;
                bev_image[DEC_param + 244976] = u;
              }
            }
            //                          BEV_Window_out(:,:,20) =
            //                          BEV_Window_out(:,:,2);
            //                          BEV_Window_out(:,:,23) =
            //                          BEV_Window_out(:,:,2);
          }
          //printf("bev_image4 : %lf\n", (double)(clock()-start_bev4)/CLOCKS_PER_SEC);
          if (!coder::isequal(empty_black_image, bev_image)) {
            // && track_number == Traffic_Number
            tmp_target_x[0] = 0.0;
            tmp_target_x[1] = -Chassis[9];
            tmp_target_x[2] = -Chassis[9];
            tmp_target_x[3] = 0.0;
            tmp_target_x[4] = 0.0;
            v_e = -Chassis[10] / 2.0;
            tmp_target_y[0] = v_e;
            tmp_target_y[1] = v_e;
            tmp_target_y[2] = Chassis[10] / 2.0;
            tmp_target_y[3] = Chassis[10] / 2.0;
            tmp_target_y[4] = v_e;
            coder::inpolygon(Rx, Ry, tmp_target_x, tmp_target_y, in_tmp, a__13);
            coder::eml_find(in_tmp, ii_data, &I_LAT_uint8, jj_data, &jj_size);
            for (b_i = 0; b_i < 18; b_i++) {
              for (i = 0; i < I_LAT_uint8; i++) {
                for (DEC_param = 0; DEC_param < jj_size; DEC_param++) {
                  bev_image[((jj_data[DEC_param] + 251 * (ii_data[i] - 1)) +
                             15311 * b_i) -
                            1] = MAX_uint8_T;
                }
              }
            }
          }
          if (!coder::isequal(empty_black_image, bev_image)) {
            t = State[2520 * track_number + 270];
            v_e = -t / 2.0;
            tmp_target_y[0] = v_e;
            tmp_target_y[1] = v_e;
            t /= 2.0;
            tmp_target_y[2] = t;
            tmp_target_y[3] = t;
            tmp_target_y[4] = v_e;
            tmp_target_x[0] = 0.0;
            t = State[2520 * track_number + 360];
            tmp_target_x[1] = t;
            tmp_target_x[2] = t;
            tmp_target_x[3] = 0.0;
            tmp_target_x[4] = 0.0;
            t = State[2520 * track_number + 900];
            Prob_cv = std::cos(t);
            t = std::sin(t);
            d = State[2520 * track_number + 450];
            d1 = State[2520 * track_number + 540];
            for (b_i = 0; b_i < 5; b_i++) {
              tmp_TLC = tmp_target_x[b_i];
              tmp_TTC = tmp_target_y[b_i];
              x_cv[b_i] = (tmp_TLC * Prob_cv - tmp_TTC * t) + d;
              tmp_TLC = (tmp_TLC * t + tmp_TTC * Prob_cv) + d1;
              tmp_target_x[b_i] = tmp_TLC;
            }
            coder::inpolygon(Rx, Ry, x_cv, tmp_target_x, in_tmp, a__13);
            coder::eml_find(in_tmp, ii_data, &I_LAT_uint8, jj_data, &jj_size);
            d = State[2520 * track_number + 1350];
            for (k = 0; k < 255; k++) {
              c_varargin_1[k] = std::abs(d - RANGE_I_LAT_RANGE[k]);
            }
            coder::internal::minimum(c_varargin_1, &mu_ctrv, &i);
            if ((jj_size != 0) || (I_LAT_uint8 != 0)) {
              if (0 <= jj_size - 1) {
                if (static_cast<double>(i) - 1.0 < 256.0) {
                  if (static_cast<double>(i) - 1.0 >= 0.0) {
                    u9 = static_cast<unsigned char>(static_cast<double>(i) -
                                                    1.0);
                    u11 = static_cast<unsigned char>(static_cast<double>(i) -
                                                     1.0);
                  } else {
                    u9 = 0U;
                    u11 = 0U;
                  }
                  if (static_cast<double>(i) - 1.0 >= 0.0) {
                    u13 = static_cast<unsigned char>(static_cast<double>(i) -
                                                     1.0);
                    u15 = static_cast<unsigned char>(static_cast<double>(i) -
                                                     1.0);
                  } else {
                    u13 = 0U;
                    u15 = 0U;
                  }
                  if (static_cast<double>(i) - 1.0 >= 0.0) {
                    u17 = static_cast<unsigned char>(static_cast<double>(i) -
                                                     1.0);
                    u19 = static_cast<unsigned char>(static_cast<double>(i) -
                                                     1.0);
                  } else {
                    u17 = 0U;
                    u19 = 0U;
                  }
                } else {
                  u9 = MAX_uint8_T;
                  u11 = MAX_uint8_T;
                  u13 = MAX_uint8_T;
                  u15 = MAX_uint8_T;
                  u17 = MAX_uint8_T;
                  u19 = MAX_uint8_T;
                }
              }
              for (i = 0; i < jj_size; i++) {
                //                      if CHANNEL.Add_Line_to_BEV_Switch
                //                  BEV_Window_out(Image_Position_X(i),Image_Position_Y(i),1)
                //                  = I_LONG_uint8-1; % R
                //                  BEV_Window_out(Image_Position_X(i),Image_Position_Y(i),4)
                //                  = I_LONG_less_uint8-1; % R
                bev_image_tmp =
                    static_cast<int>(static_cast<float>(jj_data[i])) +
                    251 *
                        (static_cast<int>(static_cast<float>(ii_data[i])) - 1);
                bev_image[bev_image_tmp - 1] = u9;
                //  R
                bev_image[bev_image_tmp + 45932] = u11;
                //  R
                bev_image[bev_image_tmp + 91865] = u13;
                //  R
                bev_image[bev_image_tmp + 137798] = u15;
                //  R
                bev_image[bev_image_tmp + 183731] = u17;
                //  R
                bev_image[bev_image_tmp + 229664] = u19;
                //  R
                //                                          BEV_Window_out(single(Image_Position_X(i)),single(Image_Position_Y(i)),19)
                //                                          = I_LAT_uint8-1; % R
                //                                          BEV_Window_out(single(Image_Position_X(i)),single(Image_Position_Y(i)),22)
                //                                          = I_LAT_uint8-1; % R
              }
            }
          }
          //          BEV_Window_out(:,:,1) = BEV_Window_out(:,:,1);
          //          BEV_Window_out(:,:,4) = BEV_Window_out(:,:,1);
          //          BEV_Window_out(:,:,7) = BEV_Window_out(:,:,1);
          //          BEV_Window_out(:,:,10) = BEV_Window_out(:,:,1);
          //          BEV_Window_out(:,:,13) = BEV_Window_out(:,:,1);
          //          BEV_Window_out(:,:,16) = BEV_Window_out(:,:,1);
          //          BEV_Window_out(:,:,19) = BEV_Window_out(:,:,1);
          //          BEV_Window_out(:,:,22) = BEV_Window_out(:,:,1);
          d = State[2520 * track_number + 1350];
          for (k = 0; k < 255; k++) {
            c_varargin_1[k] = std::abs(d - RANGE_I_LAT_RANGE[k]);
          }
          coder::internal::minimum(c_varargin_1, &mu_ctrv, &I_LAT_uint8);
          if (std::abs(static_cast<double>(I_LAT_uint8)) > 255.0) {
            I_LAT_uint8 = 1;
          }
          if (!coder::isequal(empty_black_image, bev_image)) {
            unsigned char u10;
            unsigned char u12;
            unsigned char u14;
            unsigned char u16;
            unsigned char u18;
            unsigned char u2;
            unsigned char u20;
            unsigned char u21;
            unsigned char u22;
            unsigned char u23;
            unsigned char u24;
            unsigned char u25;
            unsigned char u3;
            unsigned char u4;
            unsigned char u5;
            unsigned char u6;
            unsigned char u7;
            unsigned char u8;
            DEC_param = 2520 * track_number + 270;
            coder::linspace(-State[DEC_param] / 2.0, State[DEC_param] / 2.0,
                            TV_range_y);
            coder::linspace(0.0, State[2520 * track_number + 360], TV_range_x);
            for (i = 0; i < 10; i++) {
              DEC_param = 5 * i + 50 * track_number;
              t = X_pred[DEC_param];
              v_e = X_pred[DEC_param + 1];
              for (b_i = 0; b_i < 10; b_i++) {
                DEC_param = b_i + 10 * i;
                xp1[DEC_param] = TV_range_x[0] + v_e;
                d = TV_range_y[b_i] + t;
                yp1[DEC_param] = d;
                xp2[DEC_param] = TV_range_x[9] + v_e;
                yp2[DEC_param] = d;
                d = TV_range_x[b_i] + v_e;
                xp3[DEC_param] = d;
                yp3[DEC_param] = TV_range_y[0] + t;
                xp4[DEC_param] = d;
                yp4[DEC_param] = TV_range_y[9] + t;
              }
            }
            if (static_cast<double>(I_LAT_uint8) - 1.0 < 256.0) {
              if (static_cast<double>(I_LAT_uint8) - 1.0 >= 0.0) {
                u = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
                u1 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
              } else {
                u = 0U;
                u1 = 0U;
              }
              if (static_cast<double>(I_LAT_uint8) - 1.0 >= 0.0) {
                u2 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
                u3 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
              } else {
                u2 = 0U;
                u3 = 0U;
              }
              if (static_cast<double>(I_LAT_uint8) - 1.0 >= 0.0) {
                u4 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
                u5 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
              } else {
                u4 = 0U;
                u5 = 0U;
              }
              if (static_cast<double>(I_LAT_uint8) - 1.0 >= 0.0) {
                u6 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
                u7 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
              } else {
                u6 = 0U;
                u7 = 0U;
              }
              if (static_cast<double>(I_LAT_uint8) - 1.0 >= 0.0) {
                u8 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
                u10 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
              } else {
                u8 = 0U;
                u10 = 0U;
              }
              if (static_cast<double>(I_LAT_uint8) - 1.0 >= 0.0) {
                u12 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
                u14 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
              } else {
                u12 = 0U;
                u14 = 0U;
              }
              if (static_cast<double>(I_LAT_uint8) - 1.0 >= 0.0) {
                u16 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
                u18 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
              } else {
                u16 = 0U;
                u18 = 0U;
              }
              if (static_cast<double>(I_LAT_uint8) - 1.0 >= 0.0) {
                u20 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
                u21 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
              } else {
                u20 = 0U;
                u21 = 0U;
              }
              if (static_cast<double>(I_LAT_uint8) - 1.0 >= 0.0) {
                u22 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
                u23 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
              } else {
                u22 = 0U;
                u23 = 0U;
              }
              if (static_cast<double>(I_LAT_uint8) - 1.0 >= 0.0) {
                u24 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
                u25 = static_cast<unsigned char>(
                    static_cast<double>(I_LAT_uint8) - 1.0);
              } else {
                u24 = 0U;
                u25 = 0U;
              }
            } else {
              u = MAX_uint8_T;
              u1 = MAX_uint8_T;
              u2 = MAX_uint8_T;
              u3 = MAX_uint8_T;
              u4 = MAX_uint8_T;
              u5 = MAX_uint8_T;
              u6 = MAX_uint8_T;
              u7 = MAX_uint8_T;
              u8 = MAX_uint8_T;
              u10 = MAX_uint8_T;
              u12 = MAX_uint8_T;
              u14 = MAX_uint8_T;
              u16 = MAX_uint8_T;
              u18 = MAX_uint8_T;
              u20 = MAX_uint8_T;
              u21 = MAX_uint8_T;
              u22 = MAX_uint8_T;
              u23 = MAX_uint8_T;
              u24 = MAX_uint8_T;
              u25 = MAX_uint8_T;
            }
            for (I_LAT_uint8 = 0; I_LAT_uint8 < 100; I_LAT_uint8++) {
              d = std::round(xp1[I_LAT_uint8] * -5.0 + 126.0);
              xp1[I_LAT_uint8] = d;
              d1 = std::round(yp1[I_LAT_uint8] * -5.0 + 31.0);
              yp1[I_LAT_uint8] = d1;
              tmp_TLC = std::round(xp2[I_LAT_uint8] * -5.0 + 126.0);
              xp2[I_LAT_uint8] = tmp_TLC;
              tmp_TTC = std::round(yp2[I_LAT_uint8] * -5.0 + 31.0);
              yp2[I_LAT_uint8] = tmp_TTC;
              mu_ctrv = std::round(xp3[I_LAT_uint8] * -5.0 + 126.0);
              xp3[I_LAT_uint8] = mu_ctrv;
              c_ctrv = std::round(yp3[I_LAT_uint8] * -5.0 + 31.0);
              yp3[I_LAT_uint8] = c_ctrv;
              t = std::round(xp4[I_LAT_uint8] * -5.0 + 126.0);
              xp4[I_LAT_uint8] = t;
              Prob_cv = std::round(yp4[I_LAT_uint8] * -5.0 + 31.0);
              yp4[I_LAT_uint8] = Prob_cv;
              if (d < 1.0) {
                d = 1.0;
                xp1[I_LAT_uint8] = 1.0;
              } else if (d > 251.0) {
                d = 251.0;
                xp1[I_LAT_uint8] = 251.0;
              }
              if (d1 < 1.0) {
                d1 = 1.0;
                yp1[I_LAT_uint8] = 1.0;
              } else if (d1 > 61.0) {
                d1 = 61.0;
                yp1[I_LAT_uint8] = 61.0;
              }
              if (tmp_TLC < 1.0) {
                tmp_TLC = 1.0;
                xp2[I_LAT_uint8] = 1.0;
              } else if (tmp_TLC > 251.0) {
                tmp_TLC = 251.0;
                xp2[I_LAT_uint8] = 251.0;
              }
              if (tmp_TTC < 1.0) {
                tmp_TTC = 1.0;
                yp2[I_LAT_uint8] = 1.0;
              } else if (tmp_TTC > 61.0) {
                tmp_TTC = 61.0;
                yp2[I_LAT_uint8] = 61.0;
              }
              if (mu_ctrv < 1.0) {
                mu_ctrv = 1.0;
                xp3[I_LAT_uint8] = 1.0;
              } else if (mu_ctrv > 251.0) {
                mu_ctrv = 251.0;
                xp3[I_LAT_uint8] = 251.0;
              }
              if (c_ctrv < 1.0) {
                c_ctrv = 1.0;
                yp3[I_LAT_uint8] = 1.0;
              } else if (c_ctrv > 61.0) {
                c_ctrv = 61.0;
                yp3[I_LAT_uint8] = 61.0;
              }
              if (t < 1.0) {
                t = 1.0;
                xp4[I_LAT_uint8] = 1.0;
              } else if (t > 251.0) {
                t = 251.0;
                xp4[I_LAT_uint8] = 251.0;
              }
              if (Prob_cv < 1.0) {
                Prob_cv = 1.0;
                yp4[I_LAT_uint8] = 1.0;
              } else if (Prob_cv > 61.0) {
                Prob_cv = 61.0;
                yp4[I_LAT_uint8] = 61.0;
              }
              bev_image_tmp =
                  static_cast<int>(d) + 251 * (static_cast<int>(d1) - 1);
              bev_image[bev_image_tmp + 45932] = u;
              //  R
              i = static_cast<int>(tmp_TLC) +
                  251 * (static_cast<int>(tmp_TTC) - 1);
              bev_image[i + 45932] = u1;
              //  R
              jj_size = static_cast<int>(mu_ctrv) +
                        251 * (static_cast<int>(c_ctrv) - 1);
              bev_image[jj_size + 45932] = u2;
              //  R
              DEC_param =
                  static_cast<int>(t) + 251 * (static_cast<int>(Prob_cv) - 1);
              bev_image[DEC_param + 45932] = u3;
              //  R
              bev_image[bev_image_tmp + 91865] = u4;
              //  R
              bev_image[i + 91865] = u5;
              //  R
              bev_image[jj_size + 91865] = u6;
              //  R
              bev_image[DEC_param + 91865] = u7;
              //  R
              bev_image[bev_image_tmp + 137798] = u8;
              //  R
              bev_image[i + 137798] = u10;
              //  R
              bev_image[jj_size + 137798] = u12;
              //  R
              bev_image[DEC_param + 137798] = u14;
              //  R
              bev_image[bev_image_tmp + 183731] = u16;
              //  R
              bev_image[i + 183731] = u18;
              //  R
              bev_image[jj_size + 183731] = u20;
              //  R
              bev_image[DEC_param + 183731] = u21;
              //  R
              bev_image[bev_image_tmp + 229664] = u22;
              //  R
              bev_image[i + 229664] = u23;
              //  R
              bev_image[jj_size + 229664] = u24;
              //  R
              bev_image[DEC_param + 229664] = u25;
              //  R
              //                              BEV_Window_out(Image_Position_X1(j),Image_Position_Y1(j),19)
              //                              = I_LAT_uint8-1; % R
              //                              BEV_Window_out(Image_Position_X2(j),Image_Position_Y2(j),19)
              //                              = I_LAT_uint8-1; % R
              //                              BEV_Window_out(Image_Position_X3(j),Image_Position_Y3(j),19)
              //                              = I_LAT_uint8-1; % R
              //                              BEV_Window_out(Image_Position_X4(j),Image_Position_Y4(j),19)
              //                              = I_LAT_uint8-1; % R
              //
              //                              BEV_Window_out(Image_Position_X1(j),Image_Position_Y1(j),22)
              //                              = I_LAT_uint8-1; % R
              //                              BEV_Window_out(Image_Position_X2(j),Image_Position_Y2(j),22)
              //                              = I_LAT_uint8-1; % R
              //                              BEV_Window_out(Image_Position_X3(j),Image_Position_Y3(j),22)
              //                              = I_LAT_uint8-1; % R
              //                              BEV_Window_out(Image_Position_X4(j),Image_Position_Y4(j),22)
              //                              = I_LAT_uint8-1; % R
            }
            //          BEV_Window_out(:,:,4) = BEV_Window_out(:,:,4);
            //          BEV_Window_out(:,:,7) = BEV_Window_out(:,:,4);
            //          BEV_Window_out(:,:,10) = BEV_Window_out(:,:,4);
            //          BEV_Window_out(:,:,13) = BEV_Window_out(:,:,4);
            //          BEV_Window_out(:,:,16) = BEV_Window_out(:,:,4);
            //          BEV_Window_out(:,:,19) = BEV_Window_out(:,:,4);
            //          BEV_Window_out(:,:,22) = BEV_Window_out(:,:,4);
          }
          if (!coder::isequal(empty_black_image, bev_image)) {
            // && track_number == Traffic_Number
            coder::linspace(-Chassis[10] / 2.0, Chassis[10] / 2.0, TV_range_y);
            coder::linspace(-Chassis[9], 0.0, TV_range_x);
            for (k = 0; k < 5; k++) {
              //  time,10 sample (prediction sample),[ACC DEC ESL ESR ELCL ELCR
              //  ESS]
              for (i = 0; i < 10; i++) {
                DEC_param = i + 10 * k;
                t = TJ_Y[DEC_param];
                v_e = TJ_X[DEC_param];
                for (b_i = 0; b_i < 10; b_i++) {
                  DEC_param = b_i + 10 * i;
                  xp1[DEC_param] = TV_range_x[0] + v_e;
                  d = TV_range_y[b_i] + t;
                  yp1[DEC_param] = d;
                  xp2[DEC_param] = TV_range_x[9] + v_e;
                  yp2[DEC_param] = d;
                  d = TV_range_x[b_i] + v_e;
                  xp3[DEC_param] = d;
                  yp3[DEC_param] = TV_range_y[0] + t;
                  xp4[DEC_param] = d;
                  yp4[DEC_param] = TV_range_y[9] + t;
                }
              }
              b_i = 3 * (k + 1);
              bev_image_tmp = 15311 * (b_i + 1);
              i = 15311 * (b_i + 2);
              for (I_LAT_uint8 = 0; I_LAT_uint8 < 100; I_LAT_uint8++) {
                d = std::round(xp1[I_LAT_uint8] * -5.0 + 126.0);
                xp1[I_LAT_uint8] = d;
                d1 = std::round(yp1[I_LAT_uint8] * -5.0 + 31.0);
                yp1[I_LAT_uint8] = d1;
                tmp_TLC = std::round(xp2[I_LAT_uint8] * -5.0 + 126.0);
                xp2[I_LAT_uint8] = tmp_TLC;
                tmp_TTC = std::round(yp2[I_LAT_uint8] * -5.0 + 31.0);
                yp2[I_LAT_uint8] = tmp_TTC;
                mu_ctrv = std::round(xp3[I_LAT_uint8] * -5.0 + 126.0);
                xp3[I_LAT_uint8] = mu_ctrv;
                c_ctrv = std::round(yp3[I_LAT_uint8] * -5.0 + 31.0);
                yp3[I_LAT_uint8] = c_ctrv;
                t = std::round(xp4[I_LAT_uint8] * -5.0 + 126.0);
                xp4[I_LAT_uint8] = t;
                Prob_cv = std::round(yp4[I_LAT_uint8] * -5.0 + 31.0);
                yp4[I_LAT_uint8] = Prob_cv;
                if (d < 1.0) {
                  d = 1.0;
                  xp1[I_LAT_uint8] = 1.0;
                } else if (d > 251.0) {
                  d = 251.0;
                  xp1[I_LAT_uint8] = 251.0;
                }
                if (d1 < 1.0) {
                  d1 = 1.0;
                  yp1[I_LAT_uint8] = 1.0;
                } else if (d1 > 61.0) {
                  d1 = 61.0;
                  yp1[I_LAT_uint8] = 61.0;
                }
                if (tmp_TLC < 1.0) {
                  tmp_TLC = 1.0;
                  xp2[I_LAT_uint8] = 1.0;
                } else if (tmp_TLC > 251.0) {
                  tmp_TLC = 251.0;
                  xp2[I_LAT_uint8] = 251.0;
                }
                if (tmp_TTC < 1.0) {
                  tmp_TTC = 1.0;
                  yp2[I_LAT_uint8] = 1.0;
                } else if (tmp_TTC > 61.0) {
                  tmp_TTC = 61.0;
                  yp2[I_LAT_uint8] = 61.0;
                }
                if (mu_ctrv < 1.0) {
                  mu_ctrv = 1.0;
                  xp3[I_LAT_uint8] = 1.0;
                } else if (mu_ctrv > 251.0) {
                  mu_ctrv = 251.0;
                  xp3[I_LAT_uint8] = 251.0;
                }
                if (c_ctrv < 1.0) {
                  c_ctrv = 1.0;
                  yp3[I_LAT_uint8] = 1.0;
                } else if (c_ctrv > 61.0) {
                  c_ctrv = 61.0;
                  yp3[I_LAT_uint8] = 61.0;
                }
                if (t < 1.0) {
                  t = 1.0;
                  xp4[I_LAT_uint8] = 1.0;
                } else if (t > 251.0) {
                  t = 251.0;
                  xp4[I_LAT_uint8] = 251.0;
                }
                if (Prob_cv < 1.0) {
                  Prob_cv = 1.0;
                  yp4[I_LAT_uint8] = 1.0;
                } else if (Prob_cv > 61.0) {
                  Prob_cv = 61.0;
                  yp4[I_LAT_uint8] = 61.0;
                }
                jj_size =
                    static_cast<int>(d) + 251 * (static_cast<int>(d1) - 1);
                bev_image[(jj_size + 15311 * b_i) - 1] = MAX_uint8_T;
                bev_image[(jj_size + bev_image_tmp) - 1] = MAX_uint8_T;
                bev_image[(jj_size + i) - 1] = MAX_uint8_T;
                //  R
                jj_size = static_cast<int>(tmp_TLC) +
                          251 * (static_cast<int>(tmp_TTC) - 1);
                bev_image[(jj_size + 15311 * b_i) - 1] = MAX_uint8_T;
                bev_image[(jj_size + bev_image_tmp) - 1] = MAX_uint8_T;
                bev_image[(jj_size + i) - 1] = MAX_uint8_T;
                //  R
                jj_size = static_cast<int>(mu_ctrv) +
                          251 * (static_cast<int>(c_ctrv) - 1);
                bev_image[(jj_size + 15311 * b_i) - 1] = MAX_uint8_T;
                bev_image[(jj_size + bev_image_tmp) - 1] = MAX_uint8_T;
                bev_image[(jj_size + i) - 1] = MAX_uint8_T;
                //  R
                jj_size =
                    static_cast<int>(t) + 251 * (static_cast<int>(Prob_cv) - 1);
                bev_image[(jj_size + 15311 * b_i) - 1] = MAX_uint8_T;
                bev_image[(jj_size + bev_image_tmp) - 1] = MAX_uint8_T;
                bev_image[(jj_size + i) - 1] = MAX_uint8_T;
                //  R
              }
              //          for i = 1:length(Image_Position_X)
              //              BEV_Window_out(Image_Position_X(i),
              //              Image_Position_Y(i), :) = 255;
            }
          }
        }
      }
    }
    //printf("bev_image 2 : %lf\n", (double)(clock()-start_bev2)/CLOCKS_PER_SEC);
  }
  printf("bev_image : %lf\n", (double)(clock()-start_bev)/CLOCKS_PER_SEC);
  // BEV_image=uint8(BEV_Window_out);
}

//
// Arguments    : void
// Return Type  : void
//
void out_Prob_ctrv_not_empty_init()
{
  out_Prob_ctrv_not_empty = false;
}

//
// File trailer for BEV_image.cpp
//
// [EOF]
//

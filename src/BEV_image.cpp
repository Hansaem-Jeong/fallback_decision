//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: BEV_image.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 10-Nov-2021 22:00:36
//

// Include Files
#include "BEV_image.h"
#include "BEV_image_data.h"
#include "BEV_image_initialize.h"
#include "CTRV_MODEL.h"
#include "CV_MODEL.h"
#include "I_lat.h"
#include "Interacting.h"
#include "Mixing.h"
#include "RSS_model.h"
#include "TLC.h"
#include "matlab_array2magick.h"
#include "norm.h"
#include "rt_nonfinite.h"
#include "tmp_SBEV.h"
#include <algorithm>
#include <cmath>


// Variable Definitions
static double State[16128];

static double out_Prob_ctrv[32];

static bool out_Prob_ctrv_not_empty;

static double out_Prob_cv[32];

static double out_P_ctrv[800];

static double out_P_cv[800];

static double flag[32];

// Function Definitions
//
// Arguments    : const double Chassis[11]
//                const double Traffic[288]
//                const double Lane[10]
//                double AEB_in
//                unsigned char b_BEV_image[275598]
//                unsigned char image_magick[275598]
// Return Type  : void
//
void BEV_image(const double Chassis[11], const double Traffic[288],
               const double Lane[10], double AEB_in,
               unsigned char b_BEV_image[275598],
               unsigned char image_magick[275598])
{
  static const double RANGE_I_LAT_RANGE[255]{-0.2,
                                             -0.1952755905511811,
                                             -0.19055118110236222,
                                             -0.18582677165354333,
                                             -0.18110236220472442,
                                             -0.17637795275590551,
                                             -0.17165354330708663,
                                             -0.16692913385826774,
                                             -0.16220472440944883,
                                             -0.15748031496062992,
                                             -0.15275590551181104,
                                             -0.14803149606299215,
                                             -0.14330708661417324,
                                             -0.13858267716535433,
                                             -0.13385826771653545,
                                             -0.12913385826771656,
                                             -0.12440944881889765,
                                             -0.11968503937007875,
                                             -0.11496062992125985,
                                             -0.11023622047244096,
                                             -0.10551181102362206,
                                             -0.10078740157480316,
                                             -0.096062992125984265,
                                             -0.091338582677165367,
                                             -0.086614173228346469,
                                             -0.081889763779527572,
                                             -0.077165354330708674,
                                             -0.072440944881889791,
                                             -0.067716535433070879,
                                             -0.062992125984251968,
                                             -0.058267716535433084,
                                             -0.0535433070866142,
                                             -0.048818897637795289,
                                             -0.044094488188976377,
                                             -0.039370078740157494,
                                             -0.03464566929133861,
                                             -0.0299212598425197,
                                             -0.025196850393700787,
                                             -0.020472440944881903,
                                             -0.01574803149606302,
                                             -0.011023622047244108,
                                             -0.0062992125984251968,
                                             -0.0015748031496063131,
                                             0.0031496062992125706,
                                             0.0078740157480314821,
                                             0.012598425196850394,
                                             0.017322834645669277,
                                             0.022047244094488161,
                                             0.026771653543307072,
                                             0.031496062992125984,
                                             0.036220472440944868,
                                             0.040944881889763751,
                                             0.045669291338582663,
                                             0.050393700787401574,
                                             0.05511811023622043,
                                             0.059842519685039341,
                                             0.064566929133858253,
                                             0.069291338582677164,
                                             0.074015748031496076,
                                             0.078740157480314932,
                                             0.083464566929133843,
                                             0.088188976377952755,
                                             0.092913385826771611,
                                             0.097637795275590522,
                                             0.10236220472440943,
                                             0.10708661417322834,
                                             0.11181102362204726,
                                             0.11653543307086611,
                                             0.12125984251968502,
                                             0.12598425196850394,
                                             0.13070866141732279,
                                             0.1354330708661417,
                                             0.14015748031496061,
                                             0.14488188976377953,
                                             0.14960629921259844,
                                             0.15433070866141729,
                                             0.1590551181102362,
                                             0.16377952755905512,
                                             0.16850393700787397,
                                             0.17322834645669288,
                                             0.17795275590551179,
                                             0.18267716535433071,
                                             0.18740157480314962,
                                             0.19212598425196847,
                                             0.19685039370078738,
                                             0.2015748031496063,
                                             0.20629921259842515,
                                             0.21102362204724406,
                                             0.21574803149606298,
                                             0.22047244094488189,
                                             0.2251968503937008,
                                             0.22992125984251965,
                                             0.23464566929133857,
                                             0.23937007874015748,
                                             0.24409448818897633,
                                             0.24881889763779524,
                                             0.25354330708661416,
                                             0.25826771653543307,
                                             0.262992125984252,
                                             0.26771653543307083,
                                             0.27244094488188975,
                                             0.27716535433070866,
                                             0.28188976377952751,
                                             0.28661417322834642,
                                             0.29133858267716534,
                                             0.29606299212598425,
                                             0.30078740157480316,
                                             0.30551181102362207,
                                             0.31023622047244087,
                                             0.31496062992125978,
                                             0.31968503937007869,
                                             0.32440944881889761,
                                             0.32913385826771652,
                                             0.33385826771653543,
                                             0.33858267716535434,
                                             0.34330708661417325,
                                             0.34803149606299216,
                                             0.35275590551181096,
                                             0.35748031496062987,
                                             0.36220472440944879,
                                             0.3669291338582677,
                                             0.37165354330708661,
                                             0.37637795275590552,
                                             0.38110236220472443,
                                             0.38582677165354323,
                                             0.39055118110236214,
                                             0.39527559055118106,
                                             0.39999999999999997,
                                             0.40472440944881888,
                                             0.40944881889763779,
                                             0.4141732283464567,
                                             0.41889763779527561,
                                             0.42362204724409452,
                                             0.42834645669291332,
                                             0.43307086614173224,
                                             0.43779527559055115,
                                             0.44251968503937006,
                                             0.44724409448818897,
                                             0.45196850393700788,
                                             0.45669291338582679,
                                             0.46141732283464559,
                                             0.4661417322834645,
                                             0.47086614173228342,
                                             0.47559055118110233,
                                             0.48031496062992124,
                                             0.48503937007874015,
                                             0.48976377952755906,
                                             0.494488188976378,
                                             0.49921259842519689,
                                             0.50393700787401574,
                                             0.50866141732283454,
                                             0.51338582677165356,
                                             0.51811023622047236,
                                             0.52283464566929139,
                                             0.52755905511811019,
                                             0.53228346456692921,
                                             0.537007874015748,
                                             0.54173228346456681,
                                             0.54645669291338583,
                                             0.55118110236220463,
                                             0.55590551181102366,
                                             0.56062992125984246,
                                             0.56535433070866148,
                                             0.57007874015748028,
                                             0.5748031496062993,
                                             0.5795275590551181,
                                             0.5842519685039369,
                                             0.58897637795275593,
                                             0.59370078740157473,
                                             0.59842519685039375,
                                             0.60314960629921255,
                                             0.60787401574803157,
                                             0.61259842519685037,
                                             0.61732283464566917,
                                             0.62204724409448819,
                                             0.626771653543307,
                                             0.631496062992126,
                                             0.63622047244094482,
                                             0.64094488188976384,
                                             0.64566929133858264,
                                             0.65039370078740166,
                                             0.65511811023622046,
                                             0.65984251968503926,
                                             0.66456692913385829,
                                             0.66929133858267709,
                                             0.67401574803149611,
                                             0.67874015748031491,
                                             0.68346456692913393,
                                             0.68818897637795273,
                                             0.69291338582677153,
                                             0.69763779527559056,
                                             0.70236220472440936,
                                             0.70708661417322838,
                                             0.71181102362204718,
                                             0.7165354330708662,
                                             0.721259842519685,
                                             0.725984251968504,
                                             0.73070866141732282,
                                             0.73543307086614162,
                                             0.74015748031496065,
                                             0.74488188976377945,
                                             0.74960629921259847,
                                             0.75433070866141727,
                                             0.75905511811023629,
                                             0.76377952755905509,
                                             0.76850393700787389,
                                             0.77322834645669292,
                                             0.77795275590551172,
                                             0.78267716535433074,
                                             0.78740157480314954,
                                             0.79212598425196856,
                                             0.79685039370078736,
                                             0.80157480314960639,
                                             0.80629921259842519,
                                             0.81102362204724421,
                                             0.815748031496063,
                                             0.82047244094488181,
                                             0.82519685039370083,
                                             0.82992125984251963,
                                             0.83464566929133865,
                                             0.83937007874015745,
                                             0.84409448818897648,
                                             0.84881889763779528,
                                             0.8535433070866143,
                                             0.8582677165354331,
                                             0.8629921259842519,
                                             0.86771653543307092,
                                             0.87244094488188972,
                                             0.87716535433070875,
                                             0.88188976377952755,
                                             0.88661417322834657,
                                             0.89133858267716537,
                                             0.89606299212598439,
                                             0.90078740157480319,
                                             0.905511811023622,
                                             0.910236220472441,
                                             0.91496062992125982,
                                             0.91968503937007884,
                                             0.92440944881889764,
                                             0.92913385826771666,
                                             0.93385826771653546,
                                             0.93858267716535426,
                                             0.94330708661417328,
                                             0.94803149606299209,
                                             0.95275590551181111,
                                             0.95748031496062991,
                                             0.96220472440944893,
                                             0.96692913385826773,
                                             0.97165354330708653,
                                             0.97637795275590555,
                                             0.98110236220472435,
                                             0.98582677165354338,
                                             0.99055118110236218,
                                             0.9952755905511812,
                                             1.0};
  static const double RANGE_X_RANGE[251]{25.0,
                                         24.8,
                                         24.6,
                                         24.400000000000002,
                                         24.200000000000003,
                                         24.0,
                                         23.8,
                                         23.6,
                                         23.400000000000002,
                                         23.200000000000003,
                                         23.0,
                                         22.8,
                                         22.6,
                                         22.400000000000002,
                                         22.200000000000003,
                                         22.0,
                                         21.8,
                                         21.6,
                                         21.400000000000002,
                                         21.200000000000003,
                                         21.0,
                                         20.8,
                                         20.6,
                                         20.400000000000002,
                                         20.200000000000003,
                                         20.0,
                                         19.8,
                                         19.6,
                                         19.400000000000002,
                                         19.200000000000003,
                                         19.0,
                                         18.8,
                                         18.6,
                                         18.400000000000002,
                                         18.2,
                                         18.0,
                                         17.8,
                                         17.6,
                                         17.400000000000002,
                                         17.2,
                                         17.0,
                                         16.8,
                                         16.6,
                                         16.400000000000002,
                                         16.2,
                                         16.0,
                                         15.8,
                                         15.600000000000001,
                                         15.4,
                                         15.200000000000001,
                                         15.0,
                                         14.8,
                                         14.600000000000001,
                                         14.4,
                                         14.200000000000001,
                                         14.0,
                                         13.8,
                                         13.600000000000001,
                                         13.4,
                                         13.200000000000001,
                                         13.0,
                                         12.8,
                                         12.600000000000001,
                                         12.4,
                                         12.200000000000001,
                                         12.0,
                                         11.8,
                                         11.600000000000001,
                                         11.4,
                                         11.200000000000001,
                                         11.0,
                                         10.8,
                                         10.600000000000001,
                                         10.4,
                                         10.200000000000001,
                                         10.0,
                                         9.8,
                                         9.6000000000000014,
                                         9.4,
                                         9.2000000000000011,
                                         9.0,
                                         8.8,
                                         8.6,
                                         8.4,
                                         8.2000000000000011,
                                         8.0,
                                         7.8000000000000007,
                                         7.6000000000000005,
                                         7.4,
                                         7.2,
                                         7.0,
                                         6.8000000000000007,
                                         6.6000000000000005,
                                         6.4,
                                         6.2,
                                         6.0,
                                         5.8000000000000007,
                                         5.6000000000000005,
                                         5.4,
                                         5.2,
                                         5.0,
                                         4.8000000000000007,
                                         4.6000000000000005,
                                         4.4,
                                         4.2,
                                         4.0,
                                         3.8000000000000003,
                                         3.6,
                                         3.4000000000000004,
                                         3.2,
                                         3.0,
                                         2.8000000000000003,
                                         2.6,
                                         2.4000000000000004,
                                         2.2,
                                         2.0,
                                         1.8,
                                         1.6,
                                         1.4000000000000001,
                                         1.2000000000000002,
                                         1.0,
                                         0.8,
                                         0.60000000000000009,
                                         0.4,
                                         0.2,
                                         0.0,
                                         -0.2,
                                         -0.4,
                                         -0.60000000000000009,
                                         -0.8,
                                         -1.0,
                                         -1.2000000000000002,
                                         -1.4000000000000001,
                                         -1.6,
                                         -1.8,
                                         -2.0,
                                         -2.2,
                                         -2.4000000000000004,
                                         -2.6,
                                         -2.8000000000000003,
                                         -3.0,
                                         -3.2,
                                         -3.4000000000000004,
                                         -3.6,
                                         -3.8000000000000003,
                                         -4.0,
                                         -4.2,
                                         -4.4,
                                         -4.6000000000000005,
                                         -4.8000000000000007,
                                         -5.0,
                                         -5.2,
                                         -5.4,
                                         -5.6000000000000005,
                                         -5.8000000000000007,
                                         -6.0,
                                         -6.2,
                                         -6.4,
                                         -6.6000000000000005,
                                         -6.8000000000000007,
                                         -7.0,
                                         -7.2,
                                         -7.4,
                                         -7.6000000000000005,
                                         -7.8000000000000007,
                                         -8.0,
                                         -8.2000000000000011,
                                         -8.4,
                                         -8.6,
                                         -8.8,
                                         -9.0,
                                         -9.2000000000000011,
                                         -9.4,
                                         -9.6000000000000014,
                                         -9.8,
                                         -10.0,
                                         -10.200000000000001,
                                         -10.4,
                                         -10.600000000000001,
                                         -10.8,
                                         -11.0,
                                         -11.200000000000001,
                                         -11.4,
                                         -11.600000000000001,
                                         -11.8,
                                         -12.0,
                                         -12.200000000000001,
                                         -12.4,
                                         -12.600000000000001,
                                         -12.8,
                                         -13.0,
                                         -13.200000000000001,
                                         -13.4,
                                         -13.600000000000001,
                                         -13.8,
                                         -14.0,
                                         -14.200000000000001,
                                         -14.4,
                                         -14.600000000000001,
                                         -14.8,
                                         -15.0,
                                         -15.200000000000001,
                                         -15.4,
                                         -15.600000000000001,
                                         -15.8,
                                         -16.0,
                                         -16.2,
                                         -16.400000000000002,
                                         -16.6,
                                         -16.8,
                                         -17.0,
                                         -17.2,
                                         -17.400000000000002,
                                         -17.6,
                                         -17.8,
                                         -18.0,
                                         -18.2,
                                         -18.400000000000002,
                                         -18.6,
                                         -18.8,
                                         -19.0,
                                         -19.200000000000003,
                                         -19.400000000000002,
                                         -19.6,
                                         -19.8,
                                         -20.0,
                                         -20.200000000000003,
                                         -20.400000000000002,
                                         -20.6,
                                         -20.8,
                                         -21.0,
                                         -21.200000000000003,
                                         -21.400000000000002,
                                         -21.6,
                                         -21.8,
                                         -22.0,
                                         -22.200000000000003,
                                         -22.400000000000002,
                                         -22.6,
                                         -22.8,
                                         -23.0,
                                         -23.200000000000003,
                                         -23.400000000000002,
                                         -23.6,
                                         -23.8,
                                         -24.0,
                                         -24.200000000000003,
                                         -24.400000000000002,
                                         -24.6,
                                         -24.8,
                                         -25.0};
  static const double RANGE_Y_RANGE[61]{6.0,
                                        5.8000000000000007,
                                        5.6000000000000005,
                                        5.4,
                                        5.2,
                                        5.0,
                                        4.8000000000000007,
                                        4.6000000000000005,
                                        4.4,
                                        4.2,
                                        4.0,
                                        3.8000000000000003,
                                        3.6,
                                        3.4000000000000004,
                                        3.2,
                                        3.0,
                                        2.8000000000000003,
                                        2.6,
                                        2.4000000000000004,
                                        2.2,
                                        2.0,
                                        1.8,
                                        1.6,
                                        1.4000000000000001,
                                        1.2000000000000002,
                                        1.0,
                                        0.8,
                                        0.60000000000000009,
                                        0.4,
                                        0.2,
                                        0.0,
                                        -0.2,
                                        -0.4,
                                        -0.60000000000000009,
                                        -0.8,
                                        -1.0,
                                        -1.2000000000000002,
                                        -1.4000000000000001,
                                        -1.6,
                                        -1.8,
                                        -2.0,
                                        -2.2,
                                        -2.4000000000000004,
                                        -2.6,
                                        -2.8000000000000003,
                                        -3.0,
                                        -3.2,
                                        -3.4000000000000004,
                                        -3.6,
                                        -3.8000000000000003,
                                        -4.0,
                                        -4.2,
                                        -4.4,
                                        -4.6000000000000005,
                                        -4.8000000000000007,
                                        -5.0,
                                        -5.2,
                                        -5.4,
                                        -5.6000000000000005,
                                        -5.8000000000000007,
                                        -6.0};
  static const double dv1[25]{0.0025000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0,
                              0.0025000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0,
                              7.6154354946677152E-7, 0.0, 0.0, 0.0, 0.0, 0.0,
                              0.010000000000000002,  0.0, 0.0, 0.0, 0.0, 0.0,
                              0.00017134729863002357};
  static const double dv3[25]{0.0025000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0,
                              0.0025000000000000005, 0.0, 0.0, 0.0, 0.0, 0.0,
                              1.7134729863002359E-6, 0.0, 0.0, 0.0, 0.0, 0.0,
                              0.010000000000000002,  0.0, 0.0, 0.0, 0.0, 0.0,
                              0.010000000000000002};
  static const double dv2[9]{
      25.0, 0.0, 0.0, 0.0, 25.0, 0.0, 0.0, 0.0, 0.27415567780803768};
  static double dv[15232];
/*
  static unsigned char BEV_Window_out_1[275598];
  static unsigned char BEV_Window_out_10[275598];
  static unsigned char BEV_Window_out_11[275598];
  static unsigned char BEV_Window_out_12[275598];
  static unsigned char BEV_Window_out_13[275598];
  static unsigned char BEV_Window_out_14[275598];
  static unsigned char BEV_Window_out_15[275598];
  static unsigned char BEV_Window_out_16[275598];
  static unsigned char BEV_Window_out_17[275598];
  static unsigned char BEV_Window_out_18[275598];
  static unsigned char BEV_Window_out_19[275598];
  static unsigned char BEV_Window_out_2[275598];
  static unsigned char BEV_Window_out_20[275598];
  static unsigned char BEV_Window_out_21[275598];
  static unsigned char BEV_Window_out_22[275598];
  static unsigned char BEV_Window_out_23[275598];
  static unsigned char BEV_Window_out_24[275598];
  static unsigned char BEV_Window_out_25[275598];
  static unsigned char BEV_Window_out_26[275598];
  static unsigned char BEV_Window_out_27[275598];
  static unsigned char BEV_Window_out_28[275598];
  static unsigned char BEV_Window_out_29[275598];
  static unsigned char BEV_Window_out_3[275598];
  static unsigned char BEV_Window_out_30[275598];
  static unsigned char BEV_Window_out_31[275598];
  static unsigned char BEV_Window_out_4[275598];
  static unsigned char BEV_Window_out_5[275598];
  static unsigned char BEV_Window_out_6[275598];
  static unsigned char BEV_Window_out_7[275598];
  static unsigned char BEV_Window_out_8[275598];
  static unsigned char BEV_Window_out_9[275598];
*/
  static unsigned char BEV_Window_out_all[32][275598];
  static unsigned char image[275598];
  double X_pred[1600];
  double Training_data_data[896];
  double old_P_ctrv[800];
  double old_P_cv[800];
  double P_ctrv_tmp[250];
  double P_cv_tmp[250];
  double TJ_X[70];
  double TJ_Y[70];
  double old_Prob_ctrv[32];
  double old_Prob_cv[32];
  double old_flag_data[32];
  double P_c[25];
  double P_ctrv_old[25];
  double P_ctrv_out[25];
  double P_cv_old[25];
  double P_cv_out[25];
  double laneInfoR[5];
  double x_ctrv[5];
  double x_cv[5];
  double x_cv_out[5];
  double x_ini[5];
  double y_out[3];
  double Training_data[2];
  double Distance_to_Leftlane;
  double Distance_to_Rightlane;
  double Prob_cv_old;
  double c_ctrv;
  double d;
  double d1;
  double mu_ctrv;
  double t;
  double tmp_TLC;
  double tmp_TTC;
  double v_e;
  int DEC_param;
  int b_i;
  int i;
  int i1;
  int sample_ts;
  int track_number;
  if (!isInitialized_BEV_image) {
    BEV_image_initialize();
  }
  // function
  // [BEV_image,State,out_Prob_ctrv,out_Prob_cv,out_P_ctrv,out_P_cv,flag] =
  // fcn(Chassis, Traffic, Lane,
  // AEB_in,old_State,old_Prob_ctrv,old_Prob_cv,old_P_ctrv,old_P_cv,old_flag)
  //  CarMaker data의 sample time
  //  p.145
  //
  //  l 564
  //
  //
  //  l 454
  if (!out_Prob_ctrv_not_empty) {
    for (i = 0; i < 32; i++) {
      old_Prob_ctrv[i] = 0.8;
      old_Prob_cv[i] = 0.2;
      out_Prob_cv[i] = 0.2;
      out_Prob_ctrv[i] = 0.8;
    }
    out_Prob_ctrv_not_empty = true;
    // flag        = coder.nullcopy(zeros(15,1));
  } else {
    std::copy(&out_Prob_ctrv[0], &out_Prob_ctrv[32], &old_Prob_ctrv[0]);
    std::copy(&out_Prob_cv[0], &out_Prob_cv[32], &old_Prob_cv[0]);
    std::copy(&out_P_ctrv[0], &out_P_ctrv[800], &old_P_ctrv[0]);
    std::copy(&out_P_cv[0], &out_P_cv[800], &old_P_cv[0]);
    std::copy(&flag[0], &flag[32], &old_flag_data[0]);
  }
  //  Input Parameter
  //  Chassis
  // Sensor
  //  Traffic
  //  Lane
  //
  //  Switch
  //  CarMaker에서 생성한 data에 threat metric을 추가하여 BEV Window 생성, 저장
  //  저장된 BEV Window를 학습이 가능하도록 annotation 별로 분류
  //  저장된 BEV Window를 이용하여 Image Augmentation 하여 학습데이터 추가
  //  학습
  //  0 = 전방위 인지, 1 = FOV 적용
  //  BEV Window 생성 Parameter
  //  누적하는 궤적의 길이 (s)
  //  impact 전 첫 BEV window를 생성할 시점 (s)
  //  흑백 image
  //  컬러 image -> State (I_Lat, Velocity, Heading)
  //  Image_Channel_1일 경우 아래 2개중 하나 선택
  //  Image X 축의 크기 (pixel)
  //  Image Y 축의 크기 (pixel)
  //  m
  //  m
  //  m
  //  m
  //
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //  이 line 이후로는 코드 실행 전 수정할 필요 없음
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //  Sample_Time = 0.01; % CarMaker data의 sample time
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //  BEV Window Parameter
  //  if Image_Channel_1 == 0
  //      Only_Position_for_Channel = 0;
  //      Only_I_Lat_for_Channel = 0;
  //  end
  //  Crash data 중 lateral collision index(I_lat) > threshold 조건을 만족하면
  //  training set으로 저장 I_Lat_Threshold = 0.514687775463802; % SVM 학습을
  //  통해 구한 I_Lat threshold SVM 학습을 통해 구한 I_Lat threshold Unsafe data
  //  의 BEV Window가 저장되는 sample time Safe data 의 BEV Window가 저장되는
  //  sample time elseif Image_Channel_12 % 1:3(AEB),4:6(DEC),7:9(ES),10:12(ELC)
  //    IMAGE_Z = 3;
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //  BEV Window Normalization Parameter
  //  m
  //  m
  //  rad
  //  rad
  //  s
  //  s
  //  s
  //  s
  //  s
  //  s
  //  empty_black_image = uint8(zeros(IMAGE_X, IMAGE_Y, IMAGE_Z));
  //
  //  Threat Parameter
  // 상대차 최대감속도
  // 자차 최소감속도
  // 자차 최대가속도
  // 상대차 제동시간 (Vo -> zero)
  // 횡방향 최대가속도
  // 횡방향 최소감속도
  // 상대차 제동시간 (Vo -> zero)
  // 횡방향 마진
  // 무게중심에서 전륜까지의 거리
  // 차량 너비
  //  AddThreatMetricMultiTarget_Predict_Trajectory.m 의 Parameter
  //       [rad]              Global heading angle
  //       [m]                Global longitudinal position
  //       [m]                Global lateral position
  //       [m/s]              absolute velocity
  //       [m/s^2]
  //      [m/s]
  //      [m/s]
  //  CLASS B
  //       [rad]                                            global 좌표계에서의
  //       heading angle [m] position = 뒷범퍼 중심 [m] [m/s] [m/s] [m] [m]
  //      [m]
  //      [m]
  //      [m/s]
  //      [m/s]
  //      [rad]
  //  Description
  //                       Class_B 에서 출력되는 최대 state 개수
  //                        Preprocessing 에서 추가될 state 개수
  //  Road
  //      [m]
  //      [1/m]
  //      [rad]
  //      [m]
  //      [m]
  //  ROAD.PREPROCESSING.STATE_NUMBER                    =
  //  length(fieldnames(ROAD.PREPROCESSING)); Line
  //      [1/m^2]
  //      [1/m]
  //      [rad]
  //      [m]
  //      [1/m^2]
  //      [1/m]
  //  Initialization
  //  Traffic Coodinate Transform
  //   this part will be changed
  //  Fr0(global)
  //  Fr0(global)
  //  wheel velocity
  //  Fr1(body fixed)
  //  Fr1(body fixed)
  //  Fr1(body fixed)
  //  Lane distance
  Distance_to_Leftlane = Lane[6];
  Distance_to_Rightlane = Lane[7];
  //  Generation Training data
  track_number = 0;
  for (DEC_param = 0; DEC_param < 32; DEC_param++) {
    for (b_i = 0; b_i < 28; b_i++) {
      std::copy(&State[DEC_param * 504 + b_i * 18],
                &State[static_cast<int>((DEC_param * 504 + b_i * 18) + 17U)],
                &dv[DEC_param * 476 + b_i * 17]);
      std::copy(&dv[DEC_param * 476 + b_i * 17],
                &dv[static_cast<int>((DEC_param * 476 + b_i * 17) + 17U)],
                &State[(DEC_param * 504 + b_i * 18) + 1]);
    }
    d = Traffic[9 * DEC_param + 4];
    d1 = Traffic[9 * DEC_param + 3];
    //      Class_B(CLASS_B.PREPROCESSING.HEADING_ANGLE, track_number) =
    //      (Class_B(CLASS_B.MEASURE.GLO_HEADING_ANGLE, track_number)
    //      -In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE, 1));
    //
    //      X_FrontCenter_A =
    //      EGO_CG2_FRONT_BUMPER.*cos(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_POS_X, 1);
    //      Y_FrontCenter_A =
    //      EGO_CG2_FRONT_BUMPER.*sin(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_POS_Y, 1);
    //
    //      X_AB = Class_B(CLASS_B.MEASURE.GLO_POS_X, track_number) -
    //      X_FrontCenter_A; Y_AB = Class_B(CLASS_B.MEASURE.GLO_POS_Y,
    //      track_number) - Y_FrontCenter_A;
    //
    //      x_AB = X_AB .*
    //      cos(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + Y_AB .*
    //      sin(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)); y_AB = -X_AB .*
    //      sin(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + Y_AB .*
    //      cos(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1));
    //
    //      Class_B(CLASS_B.PREPROCESSING.REL_POS_Y, track_number) = y_AB;
    //      Class_B(CLASS_B.PREPROCESSING.REL_POS_X, track_number) = x_AB;
    //
    //      Class_B(CLASS_B.PREPROCESSING.REL_VEL_X, track_number) =
    //      Class_B(CLASS_B.MEASURE.GLO_VEL_X, track_number) .*
    //      cos(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + Class_B(CLASS_B.MEASURE.GLO_VEL_Y,
    //      track_number).*sin(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) - In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.LONG_VEL, 1);
    //      Class_B(CLASS_B.PREPROCESSING.REL_VEL_Y, track_number) =
    //      -Class_B(CLASS_B.MEASURE.GLO_VEL_X, track_number) .*
    //      sin(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) + Class_B(CLASS_B.MEASURE.GLO_VEL_Y,
    //      track_number).*cos(In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.GLO_HEADING_ANGLE,
    //      1)) - In_Vehicle_Sensor(IN_VEHICLE_SENSOR.MEASURE.LAT_VEL, 1);
    track_number = DEC_param;
    Training_data_data[28 * DEC_param + 1] = Chassis[10];
    Training_data_data[28 * DEC_param + 2] = Chassis[9];
    Training_data_data[28 * DEC_param + 5] = Traffic[9 * DEC_param];
    Training_data_data[28 * DEC_param + 6] = Traffic[9 * DEC_param + 1];
    Training_data_data[28 * DEC_param + 7] = d1;
    Training_data_data[28 * DEC_param + 8] = d;
    Training_data_data[28 * DEC_param + 9] = std::sqrt(d1 * d1 + d * d);
    Training_data_data[28 * DEC_param + 10] = Traffic[9 * DEC_param + 2];
    Training_data_data[28 * DEC_param + 3] = Traffic[9 * DEC_param + 8];
    Training_data_data[28 * DEC_param + 4] = Traffic[9 * DEC_param + 7];
  }
  //  IMM-UKF
  //  [y x yaw v yawrate]
  // out_Prob_cv = 0.2 * ones(Traffic_Number,1);
  // out_Prob_ctrv = 0.8 * ones(Traffic_Number,1);
  // out_P_ctrv = zeros(5,5,Traffic_Number);
  // out_P_cv = zeros(5,5,Traffic_Number);
  //  ACC DEC ESL ESR ELCL ELCR ESS
  //  TJ_ELCL=zeros(length(index_time),10);
  //  TJ_ELCR=zeros(length(index_time),10);
  //  TJ_DEC=zeros(length(index_time),10);
  //  TJ_ACC=zeros(length(index_time),10);
  //  for index_time = 1:length(sim_time)
  Training_data[0] = Training_data_data[28 * track_number + 8];
  Training_data[1] = Training_data_data[28 * track_number + 7];
  v_e = coder::b_norm(Training_data);
  //  Fr1(body fixed)
  if (AEB_in == 0.0) {
    DEC_param = 0;
  } else {
    DEC_param = -6;
  }
  //  ACC Y
  //  DEC Y
  //  ESL X
  //  ESL Y
  //  ELCL X
  //  ELCL Y
  //  ESS X
  //  ESS Y
  //  ACC Y
  for (i = 0; i < 10; i++) {
    t = (static_cast<double>(i) + 1.0) * 0.2;
    // ESL
    d = 0.14323944878270578 * std::sin(3.2360431875928319 * t) -
        0.46352904242782755 * t;
    TJ_Y[i + 20] = d;
    d1 = t * t;
    c_ctrv = v_e * t;
    mu_ctrv = c_ctrv + 0.5 * static_cast<double>(DEC_param) * d1;
    TJ_X[i + 20] = mu_ctrv;
    // ESR
    Prob_cv_old = 0.55704230082163364 * std::sin(1.6409734010875878 * t) -
                  0.91409159892893144 * t;
    TJ_Y[i + 40] = Prob_cv_old;
    t = c_ctrv + 0.5 * static_cast<double>(DEC_param) * d1;
    TJ_X[i + 40] = t;
    TJ_X[i] = c_ctrv + 2.0 * d1;
    TJ_X[i + 10] = c_ctrv + -5.0 * d1;
    TJ_X[i + 30] = mu_ctrv;
    TJ_Y[i + 30] = -d;
    TJ_X[i + 50] = t;
    TJ_Y[i + 50] = -Prob_cv_old;
    TJ_X[i + 60] = t;
    TJ_Y[i + 60] = Prob_cv_old;
    TJ_Y[i] = 0.0;
    TJ_Y[i + 10] = 0.0;
  }
  //  DEC Y
  // flag=zeros(32,1);
  x_ini[4] = 0.0;
  for (track_number = 0; track_number < 32; track_number++) {
    d = Training_data_data[28 * track_number + 5];
    if ((d >= -25.0) && (d <= 25.0)) {
      d1 = Training_data_data[28 * track_number + 6];
      if ((d1 >= -6.0) && (d1 <= 6.0)) {
        flag[track_number] = 1.0;
      } else {
        flag[track_number] = 0.0;
      }
    } else {
      flag[track_number] = 0.0;
    }
    d1 = Training_data_data[28 * track_number + 6];
    y_out[0] = d1;
    y_out[1] = d;
    c_ctrv = Training_data_data[28 * track_number + 10];
    y_out[2] = -c_ctrv;
    Training_data[0] = Training_data_data[28 * track_number + 8];
    Training_data[1] = Training_data_data[28 * track_number + 7];
    x_ini[0] = d1;
    x_ini[1] = d;
    x_ini[2] = -c_ctrv;
    x_ini[3] = -coder::b_norm(Training_data);
    if ((old_flag_data[track_number] == 0.0) && (flag[track_number] == 1.0)) {
      t = 0.8;
      Prob_cv_old = 0.2;
    } else {
      t = old_Prob_ctrv[track_number];
      Prob_cv_old = old_Prob_cv[track_number];
      for (b_i = 0; b_i < 5; b_i++) {
        for (i1 = 0; i1 < 5; i1++) {
          DEC_param = i1 + 5 * b_i;
          i = DEC_param + 25 * track_number;
          P_ctrv_old[DEC_param] = old_P_ctrv[i];
          P_cv_old[DEC_param] = old_P_cv[i];
        }
      }
    }
    // zeros(5,1);
    // zeros(5,1);
    Interacting(t, Prob_cv_old, x_ini, x_ini, P_ctrv_old, P_cv_old, &c_ctrv,
                laneInfoR, P_ctrv_out, &tmp_TTC, x_cv_out, P_cv_out);
    d = old_flag_data[track_number];
    for (sample_ts = 0; sample_ts < 10; sample_ts++) {
      t = (static_cast<double>(sample_ts) + 1.0) * 0.2;
      for (i = 0; i < 5; i++) {
        x_ctrv[i] = x_ini[i];
      }
      std::copy(&dv1[0], &dv1[25], &P_ctrv_old[0]);
      mu_ctrv = CTRV_MODEL(laneInfoR, P_ctrv_out, y_out, x_ctrv,
                           flag[track_number], d, P_ctrv_old, dv2, t);
      for (i = 0; i < 5; i++) {
        for (b_i = 0; b_i < 5; b_i++) {
          DEC_param = b_i + 5 * i;
          P_ctrv_tmp[DEC_param + 25 * sample_ts] = P_ctrv_old[DEC_param];
        }
        x_cv[i] = x_ini[i];
      }
      std::copy(&dv3[0], &dv3[25], &P_cv_old[0]);
      Prob_cv_old = CV_MODEL(x_cv_out, P_cv_out, y_out, x_cv,
                             flag[track_number], d, P_cv_old, dv2, t);
      for (b_i = 0; b_i < 5; b_i++) {
        for (i1 = 0; i1 < 5; i1++) {
          DEC_param = i1 + 5 * b_i;
          P_cv_tmp[DEC_param + 25 * sample_ts] = P_cv_old[DEC_param];
        }
      }
      Mixing(c_ctrv, x_ctrv, P_ctrv_old, mu_ctrv, tmp_TTC, x_cv, P_cv_old,
             Prob_cv_old, &t, &v_e,
             *(double(*)[5]) & X_pred[5 * sample_ts + 50 * track_number], P_c);
      //          [Prob_ctrv,Prob_cv,X_c,P_c] =
      //          Mixing(c_ctrv,x_ctrv,P_ctrv,mu_ctrv,c_cv,x_cv,P_cv,mu_cv);
      if (sample_ts + 1 == 1) {
        out_Prob_ctrv[track_number] = t;
        out_Prob_cv[track_number] = v_e;
      }
    }
    for (b_i = 0; b_i < 5; b_i++) {
      for (i1 = 0; i1 < 5; i1++) {
        DEC_param = i1 + 5 * b_i;
        i = DEC_param + 25 * track_number;
        out_P_ctrv[i] = P_ctrv_tmp[DEC_param];
        out_P_cv[i] = P_cv_tmp[DEC_param];
      }
    }
  }
  //  Threat Assessment
  d = Chassis[5];
  d1 = Chassis[6];
  for (track_number = 0; track_number < 32; track_number++) {
    double target_vel_x;
    double target_vel_y;
    //  Add Threat Metric to Training Data
    DEC_param = 28 * track_number + 7;
    t = Training_data_data[DEC_param];
    target_vel_x = d + t;
    target_vel_y = d1 + Training_data_data[28 * track_number + 8];
    //     %% TTC
    //  TTC Calculates time to collision in ROI.
    //
    //  TTC_out = TTC(rel_pos_x, rel_pos_y, rel_vel_x, ROI)
    //  rel_pos_x {double} : Relative longitudinal position (m)
    //  rel_pos_y {double} : Relative lateral position (m)
    //  rel_vel_x {double} : Relative longitudinal velocity (m/s)
    //  TTC_PARAM {struct} : Parameters for calculation of TTC
    //                        TTC_PARAM.ROI.Y_MIN : minimum relative lateral
    //                        position of ROI TTC_PARAM.ROI.Y_MAX : maximum
    //                        relative lateral position of ROI
    //                        TTC_PARAM.ROI.X_MIN : minimum relative
    //                        longitudinal position of ROI TTC_PARAM.ROI.X_MAX :
    //                        maximum relative longitudinal position of ROI
    //                        TTC_PARAM.TTC_MAX   : default value for exception
    b_i = 28 * track_number + 6;
    if (std::abs(Training_data_data[b_i]) <= 2.0) {
      tmp_TTC = -Training_data_data[28 * track_number + 5] / t;
    } else {
      tmp_TTC = 11.0;
    }
    if (tmp_TTC < 0.0) {
      tmp_TTC = 11.0;
    }
    Prob_cv_old = 1.0 / tmp_TTC;
    if (Prob_cv_old > 100.0) {
      Prob_cv_old = 100.0;
    }
    Training_data_data[28 * track_number + 11] = tmp_TTC;
    Training_data_data[28 * track_number + 13] = Prob_cv_old;
    //     %% TLC
    TLC(Training_data_data[28 * track_number + 6],
        Training_data_data[28 * track_number + 8],
        Training_data_data[28 * track_number + 10],
        Training_data_data[28 * track_number + 3],
        Training_data_data[28 * track_number + 4], Distance_to_Leftlane,
        Distance_to_Rightlane, &tmp_TLC, &Prob_cv_old);
    Prob_cv_old = 1.0 / tmp_TLC;
    if (Prob_cv_old > 100.0) {
      Prob_cv_old = 100.0;
    }
    Training_data_data[28 * track_number + 12] = tmp_TLC;
    Training_data_data[28 * track_number + 14] = Prob_cv_old;
    //     %% Ilat (lateral collision index)
    //  lateral: Ilat(combined and single),DLC and TLC
    //  longitudinal : Ilong,dw,dbr,xp and TTC
    //          I_LAT_PARAM.TTC_INVERSE_THRESHOLD=4;
    //          I_LAT_PARAM.A_X_MAX=-10;
    //          I_LAT_PARAM.A_X_MAX=-1;
    I_lat(Training_data_data[28 * track_number + 5],
          Training_data_data[28 * track_number + 6],
          Training_data_data[28 * track_number + 7],
          Training_data_data[28 * track_number + 8], d, target_vel_x,
          Training_data_data[28 * track_number + 10],
          Training_data_data[28 * track_number + 3],
          Training_data_data[28 * track_number + 4],
          Training_data_data[28 * track_number + 2], Distance_to_Leftlane,
          Distance_to_Rightlane, &Training_data_data[28 * track_number + 15],
          &t, &tmp_TTC, &v_e, &mu_ctrv, &c_ctrv, &Prob_cv_old, &tmp_TLC);
    Training_data_data[28 * track_number + 16] = t;
    //          I_LAT_PARAM.A_X_MAX=-10;
    I_lat(Training_data_data[28 * track_number + 5],
          Training_data_data[28 * track_number + 6],
          Training_data_data[28 * track_number + 7],
          Training_data_data[28 * track_number + 8], d, target_vel_x,
          Training_data_data[28 * track_number + 10],
          Training_data_data[28 * track_number + 3],
          Training_data_data[28 * track_number + 4],
          Training_data_data[28 * track_number + 2], Distance_to_Leftlane,
          Distance_to_Rightlane, &Training_data_data[28 * track_number + 27],
          &t, &tmp_TTC, &v_e, &mu_ctrv, &c_ctrv, &Prob_cv_old, &tmp_TLC);
    Training_data_data[28 * track_number + 26] = t;
    //     %% RSS (minimum safe distance x and y)
    RSS_model(Training_data_data[28 * track_number + 5],
              Training_data_data[28 * track_number + 6], d, target_vel_x, d1,
              target_vel_y, &Training_data_data[28 * track_number + 17], &t);
    Training_data_data[28 * track_number + 18] = t;
    //     %% Honda warning and avoidance algorithm (dw,dbr)
    //   HONDA calculates Honda's time to collision algorithm in ROI.
    //
    //  HONDA_out = HONDA(rel_pos_x, rel_pos_y, rel_vel_x, ROI)
    //  rel_pos_x {double} : Relative longitudinal position (m)
    //  rel_pos_y {double} : Relative lateral position (m)
    //  rel_vel_x {double} : Relative longitudinal velocity (m/s)
    //  HONDA_PARAM {struct} : Parameters for calculation of Honda algorithm
    //                        HONDA_PARAM.ROI.Y_MIN : minimum relative lateral
    //                        position of ROI HONDA_PARAM.ROI.Y_MAX : maximum
    //                        relative lateral position of ROI
    //                        HONDA_PARAM.ROI.X_MIN : minimum relative
    //                        longitudinal position of ROI HONDA_PARAM.ROI.X_MAX
    //                        : maximum relative longitudinal position of ROI
    //                        HONDA_PARAM.HONDA_MIN   : default value for
    //                        exception
    if ((Training_data_data[b_i] >= -2.0) && (Training_data_data[b_i] <= 2.0)) {
      c_ctrv = Training_data_data[28 * track_number + 5];
      if ((c_ctrv >= -1.0) && (c_ctrv <= 120.0)) {
        Prob_cv_old = -2.2 * Training_data_data[DEC_param] + 6.2;
      } else {
        Prob_cv_old = 1.0;
      }
    } else {
      Prob_cv_old = 1.0;
    }
    if (d >= 11.67) {
      v_e = (0.2 * -Training_data_data[DEC_param] - 0.20000000000000004) -
            0.05000000000000001;
    } else {
      v_e =
          (0.2 * d - 0.05000000000000001) - target_vel_x * target_vel_x / 20.0;
    }
    if (target_vel_x < -0.1) {
      v_e =
          (0.2 * d - 0.05000000000000001) + target_vel_x * target_vel_x / 20.0;
    }
    if (v_e < 0.0) {
      v_e = 0.0;
    }
    //  THM(HONDA)
    t = (Training_data_data[28 * track_number + 5] - v_e) / (Prob_cv_old - v_e);
    Training_data_data[28 * track_number + 19] = Prob_cv_old;
    Training_data_data[28 * track_number + 20] = v_e;
    Training_data_data[28 * track_number + 21] = t;
    Training_data_data[28 * track_number + 22] = 0.0;
    Training_data_data[28 * track_number + 23] = 0.0;
    Training_data_data[28 * track_number + 24] = 0.0;
    Training_data_data[28 * track_number + 25] = 0.0;
  }
  //  Output
  for (b_i = 0; b_i < 32; b_i++) {
    for (i1 = 0; i1 < 28; i1++) {
      State[18 * i1 + 504 * b_i] = Training_data_data[i1 + 28 * b_i];
    }
  }
  x_ini[0] = 6.0 * Lane[0];
  x_ini[1] = 2.0 * Lane[2];
  x_ini[2] = Lane[4];
  x_ini[3] = Lane[6];
  x_ini[4] = Lane[8];
  laneInfoR[0] = 6.0 * Lane[1];
  laneInfoR[1] = 2.0 * Lane[3];
  laneInfoR[2] = Lane[5];
  laneInfoR[3] = Lane[7];
  laneInfoR[4] = Lane[9];
  //  for track_number = 1:Traffic_Number
  // AES
  #pragma omp parallel for
  for(int idx = 0;idx<32;++idx) {
    std::copy(&image[0], &image[275598], &BEV_Window_out_all[idx][0]);
    tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_all[idx], X_pred, TJ_X, TJ_Y);
  }
/*
  std::copy(&image[0], &image[275598], &BEV_Window_out_1[0]);
  tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
           x_ini, laneInfoR, BEV_Window_out_1, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_2[0]);
  b_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_2, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_3[0]);
  c_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_3, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_4[0]);
  d_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_4, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_5[0]);
  e_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_5, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_6[0]);
  f_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_6, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_7[0]);
  g_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_7, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_8[0]);
  h_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_8, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_9[0]);
  i_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_9, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_10[0]);
  j_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_10, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_11[0]);
  k_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_11, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_12[0]);
  l_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_12, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_13[0]);
  m_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_13, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_14[0]);
  n_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_14, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_15[0]);
  o_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_15, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_16[0]);
  p_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_16, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_17[0]);
  q_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_17, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_18[0]);
  r_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_18, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_19[0]);
  s_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_19, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_20[0]);
  t_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_20, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_21[0]);
  u_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_21, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_22[0]);
  v_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_22, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_23[0]);
  w_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_23, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_24[0]);
  x_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_24, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_25[0]);
  y_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
             x_ini, laneInfoR, BEV_Window_out_25, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_26[0]);
  ab_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
              x_ini, laneInfoR, BEV_Window_out_26, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_27[0]);
  bb_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
              x_ini, laneInfoR, BEV_Window_out_27, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_28[0]);
  cb_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
              x_ini, laneInfoR, BEV_Window_out_28, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_29[0]);
  db_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
              x_ini, laneInfoR, BEV_Window_out_29, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_30[0]);
  eb_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
              x_ini, laneInfoR, BEV_Window_out_30, X_pred, TJ_X, TJ_Y);
  std::copy(&image[0], &image[275598], &BEV_Window_out_31[0]);
  fb_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
              x_ini, laneInfoR, BEV_Window_out_31, X_pred, TJ_X, TJ_Y);
  gb_tmp_SBEV(Chassis, State, RANGE_X_RANGE, RANGE_Y_RANGE, RANGE_I_LAT_RANGE,
              x_ini, laneInfoR, image, X_pred, TJ_X, TJ_Y);
*/
  for (DEC_param = 0; DEC_param < 18; DEC_param++) {
    if ((DEC_param + 1 == 1) || (DEC_param + 1 == 4) || (DEC_param + 1 == 7) ||
        (DEC_param + 1 == 10) || (DEC_param + 1 == 13) ||
        (DEC_param + 1 == 16)) {
      for (b_i = 0; b_i < 61; b_i++) {
        for (i1 = 0; i1 < 251; i1++) {
          i = (i1 + 251 * b_i) + 15311 * DEC_param;
          sample_ts = static_cast<int>(static_cast<unsigned int>(BEV_Window_out_all[0][i]) +
                                       BEV_Window_out_all[1][i]);
          if(static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          for(int iii=2;iii<32;++iii) {
            sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                         BEV_Window_out_all[iii][i]);
            if(static_cast<unsigned int>(sample_ts) > 255U) {
              sample_ts = 255;
            }
          }


/*

          sample_ts =
              static_cast<int>(static_cast<unsigned int>(BEV_Window_out_1[i]) +
                               BEV_Window_out_2[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_3[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_4[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_5[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_6[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_7[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_8[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_9[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_10[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_11[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_12[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_13[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_14[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_15[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_16[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_17[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_18[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_19[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_20[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_21[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_22[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_23[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_24[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_25[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_26[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_27[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_28[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_29[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_30[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts = static_cast<int>(static_cast<unsigned int>(sample_ts) +
                                       BEV_Window_out_31[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
          sample_ts =
              static_cast<int>(static_cast<unsigned int>(sample_ts) + image[i]);
          if (static_cast<unsigned int>(sample_ts) > 255U) {
            sample_ts = 255;
          }
*/
          b_BEV_image[i] = static_cast<unsigned char>(sample_ts);
        }
      }
    } else {
      for (b_i = 0; b_i < 61; b_i++) {
        std::copy(&BEV_Window_out_all[0][DEC_param * 15311 + b_i * 251],
                  &BEV_Window_out_all[0][static_cast<int>(
                      (DEC_param * 15311 + b_i * 251) + 251U)],
                  &b_BEV_image[DEC_param * 15311 + b_i * 251]);
      }
    }
  }
  // filen = strcat('bev_image_', int2str(idx),'.jpg');
  // imwrite(BEV_image, 'bev_image.jpg');
  matlab_array2magick(b_BEV_image, image_magick);
}

//
// Arguments    : void
// Return Type  : void
//
void out_Prob_ctrv_not_empty_init()
{
  out_Prob_ctrv_not_empty = false;
}

//
// File trailer for BEV_image.cpp
//
// [EOF]
//
